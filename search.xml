<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>suanfa1</title>
      <link href="//undefined.html"/>
      <url>//undefined.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面试经典150题第2题</title>
      <link href="//4909adf4.html"/>
      <url>//4909adf4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h1><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 移除所有数值等于 <code>val</code> 的元素。元素的顺序可能发生改变。然后返回 <code>nums</code> 中与 <code>val</code> 不同的元素的数量。</p><p>假设 <code>nums</code> 中不等于 <code>val</code> 的元素数量为 <code>k</code>，要通过此题，您需要执行以下操作：</p><ul><li>更改 <code>nums</code> 数组，使 <code>nums</code> 的前 <code>k</code> 个元素包含不等于 <code>val</code> 的元素。<code>nums</code> 的其余元素和 <code>nums</code> 的大小并不重要。</li><li>返回 <code>k</code>。</li></ul><p><strong>用户评测：</strong></p><p>评测机将使用以下代码测试您的解决方案：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int[] nums = [...]; // 输入数组</span><br><span class="line">int val = ...; // 要移除的值</span><br><span class="line">int[] expectedNums = [...]; // 长度正确的预期答案。</span><br><span class="line">                            // 它以不等于 val 的值排序。</span><br><span class="line"></span><br><span class="line">int k = removeElement(nums, val); // 调用你的实现</span><br><span class="line"></span><br><span class="line">assert k == expectedNums.length;</span><br><span class="line">sort(nums, 0, k); // 排序 nums 的前 k 个元素</span><br><span class="line">for (int i = 0; i &lt; actualLength; i++) &#123;</span><br><span class="line">    assert nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有的断言都通过，你的解决方案将会 <strong>通过</strong>。</p><h1 id="二、思路描述"><a href="#二、思路描述" class="headerlink" title="二、思路描述"></a>二、思路描述</h1><p>遍历数组里面所有值，不等赋值到当前值，同时k+1，相等则跳过</p><h1 id="三、python实现"><a href="#三、python实现" class="headerlink" title="三、python实现"></a>三、python实现</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        k = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> nums :</span><br><span class="line">            <span class="keyword">if</span> x != val:</span><br><span class="line">                nums[k] = x</span><br><span class="line">                k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> k</span><br></pre></td></tr></table></figure><h1 id="四、java实现"><a href="#四、java实现" class="headerlink" title="四、java实现"></a>四、java实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x : nums)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x != val) nums[k++] = x ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 算法题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试经典150题第1题</title>
      <link href="//8ad69b65.html"/>
      <url>//8ad69b65.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h1><p>给你一个 <strong>非严格递增排列</strong> 的数组 <code>nums</code> ，请你**<a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"> 原地</a>** 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新长度。元素的 <strong>相对顺序</strong> 应该保持 <strong>一致</strong> 。然后返回 <code>nums</code> 中唯一元素的个数。</p><p>考虑 <code>nums</code> 的唯一元素的数量为 <code>k</code> ，你需要做以下事情确保你的题解可以被通过：</p><ul><li>更改数组 <code>nums</code> ，使 <code>nums</code> 的前 <code>k</code> 个元素包含唯一元素，并按照它们最初在 <code>nums</code> 中出现的顺序排列。<code>nums</code> 的其余元素与 <code>nums</code> 的大小不重要。</li><li>返回 <code>k</code> 。</li></ul><p><strong>判题标准:</strong></p><p>系统会用下面的代码来测试你的题解:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int[] nums = [...]; // 输入数组</span><br><span class="line">int[] expectedNums = [...]; // 长度正确的期望答案</span><br><span class="line"></span><br><span class="line">int k = removeDuplicates(nums); // 调用</span><br><span class="line"></span><br><span class="line">assert k == expectedNums.length;</span><br><span class="line">for (int i = 0; i &lt; k; i++) &#123;</span><br><span class="line">    assert nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有断言都通过，那么您的题解将被 <strong>通过</strong>。</p><h1 id="二、思路描述"><a href="#二、思路描述" class="headerlink" title="二、思路描述"></a>二、思路描述</h1><p>相同元素不处理，不同元素赋值加上一</p><h1 id="三、python实现"><a href="#三、python实现" class="headerlink" title="三、python实现"></a>三、python实现</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeDuplicates</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        k = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] != nums[i-<span class="number">1</span>]:</span><br><span class="line">                nums[k] = nums[i]</span><br><span class="line">                k += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> k</span><br></pre></td></tr></table></figure><h1 id="四、java实现"><a href="#四、java实现" class="headerlink" title="四、java实现"></a>四、java实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length ; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] != nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">                nums[k++] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试经典150题第1题</title>
      <link href="//8ad69b65.html"/>
      <url>//8ad69b65.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h1><p>给你两个按 <strong>非递减顺序</strong> 排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。</p><p>请你 <strong>合并</strong> <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列。</p><p><strong>注意：</strong>最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m + n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 <code>0</code> ，应忽略。<code>nums2</code> 的长度为 <code>n</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</span><br><span class="line">输出：[1,2,2,3,5,6]</span><br><span class="line">解释：需要合并 [1,2,3] 和 [2,5,6] 。</span><br><span class="line">合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1], m = 1, nums2 = [], n = 0</span><br><span class="line">输出：[1]</span><br><span class="line">解释：需要合并 [1] 和 [] 。</span><br><span class="line">合并结果是 [1] 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [0], m = 0, nums2 = [1], n = 1</span><br><span class="line">输出：[1]</span><br><span class="line">解释：需要合并的数组是 [] 和 [1] 。</span><br><span class="line">合并结果是 [1] 。</span><br><span class="line">注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>nums1.length == m + n</code></li><li><code>nums2.length == n</code></li><li><code>0 &lt;= m, n &lt;= 200</code></li><li><code>1 &lt;= m + n &lt;= 200</code></li><li><code>-109 &lt;= nums1[i], nums2[j] &lt;= 109</code></li></ul><h1 id="二、思路描述"><a href="#二、思路描述" class="headerlink" title="二、思路描述"></a>二、思路描述</h1><p>从后往前排，条件判断大小，while提供终止条件</p><h1 id="三、python实现"><a href="#三、python实现" class="headerlink" title="三、python实现"></a>三、python实现</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">self, nums1: <span class="type">List</span>[<span class="built_in">int</span>], m: <span class="built_in">int</span>, nums2: <span class="type">List</span>[<span class="built_in">int</span>], n: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        p ,p1 , p2 = n + m -<span class="number">1</span> ,m - <span class="number">1</span> , n -<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> p2 &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> p1 &gt;= <span class="number">0</span> <span class="keyword">and</span> nums1[p1] &gt; nums2[p2]:</span><br><span class="line">        nums1[p] = nums1[p1]</span><br><span class="line">        p1 -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">        nums1[p] = nums2[p2]</span><br><span class="line">        p2 -= <span class="number">1</span></span><br><span class="line">        p -= <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="四、java实现"><a href="#四、java实现" class="headerlink" title="四、java实现"></a>四、java实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> m, <span class="type">int</span>[] nums2, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> m + n -<span class="number">1</span> , p1 = m - <span class="number">1</span> , p2 = n -<span class="number">1</span> ;</span><br><span class="line">        <span class="keyword">while</span>(p2&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (p1 &gt;= <span class="number">0</span> &amp;&amp; nums1[p1] &gt; nums2[p2])&#123;</span><br><span class="line">                nums1[p--] = nums1[p1--];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                nums1[p--] = nums2[p2--];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书生训练营闯关记录（基础岛第1关）</title>
      <link href="//31321f2d.html"/>
      <url>//31321f2d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="一、发展历程"><a href="#一、发展历程" class="headerlink" title="一、发展历程"></a>一、发展历程</h1><p>2023年7月6日：InternLM-7B模型开源，并且是首个免费商用的模型。<br>2024年1月17日：InternLM-20B模型开源。<br>2024年7月4日：InternLM2.5模型开源。<br>2023年9月20日：InternLM2模型开源，并且发布了全链条开源工具体系。<br>2024年1月17日：InternLM2模型开源，并且开源工具链进行了全线升级，性能超过了最新的同量级开源模型。<br><img src="/31321f2d/01.png" alt="image-20240809160325183"></p><p>书生大模型是上海人工智能实验室推出的自然语言的大模型开源项目，该项目具有性能好、全链路开源等特点。</p><blockquote><p>经过几年的不断发展，目前LM2.5-20B已经达到了GPT-4的水平。</p></blockquote><p><img src="/31321f2d/02.png" alt="image-20240809160520546"></p><h1 id="二、核心技术思路"><a href="#二、核心技术思路" class="headerlink" title="二、核心技术思路"></a>二、核心技术思路</h1><ul><li>模型能力迭代飞轮</li></ul><p><img src="/31321f2d/04.png" alt="image.png"></p><ul><li><p>高质量的合成数据：融合多种数据合成方案，提升合成数据质量</p><p><img src="/31321f2d/05.png" alt="image.png"></p></li><li><p>自主规划和搜索完成复杂任务</p><p><img src="/31321f2d/06.png" alt="img"></p></li></ul><h1 id="三、生浦语开源模型谱系"><a href="#三、生浦语开源模型谱系" class="headerlink" title="三、生浦语开源模型谱系"></a>三、生浦语开源模型谱系</h1><p>给出了不同规模的模型，如适合本地个人使用的1.8B模型，适合小规模团队或商用的7B模型等。</p><ul><li>1.8亿参数的超轻量级模型，适用于端侧应用或开发者快速学习上手。</li><li>7亿参数的模型，轻便但性能不俗，为轻量级的研究和应用提供强力支撑。</li><li>20亿参数的模型，综合性能强劲，可以支持更加复杂的实用场景。</li><li>1020亿参数的闭源模型，性能强大，典型场景表现接近GPT-4。</li></ul><p><img src="/31321f2d/03.png" alt="image-20240809160917787"><br>主要项目和工具：</p><ul><li>MindSearch：思索式开源搜索应用。</li><li>Lagent：首个支持代码解释器的智能体框架。</li><li>MinerU：高效文档解析工具。</li><li>书生·万卷：首个精细处理的开源多模态语料库：提供多模态数据处理。</li><li>HuixiangDou：基于专业知识库的群聊助手。</li><li>InternEvo：性能超过国际主流训练框架。</li><li>OpenCompass：社区最全面的开源评测体系。</li><li>DeepSpeed：系列模型和工具。</li><li>XTuner：多种微调和偏好对齐算法。</li><li>LMDeploy：支持多种微调和偏好对齐算法的部署工具。<br>合作伙伴和工具：</li></ul><p> Hugging Face：提供VLLM、LLaMAC等工具。</p><ul><li>TensorRT-LLM：用于深度学习推理的优化工具。</li><li>LMStudio：用于模型微调和部署的平台。</li><li>LLaMA-Factory：用于生成和管理LLaMA模型的工厂。</li><li>andEGeLLMFint：可能是一种金融领域的LLM应用。</li><li>Llamalndex、ollama、MLX、llamafile、Swift：其他相关工具或框架。</li></ul><p><img src="/07.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大模型本地知识库问答(一）</title>
      <link href="//eb6dbeb7.html"/>
      <url>//eb6dbeb7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="一、Langchain介绍"><a href="#一、Langchain介绍" class="headerlink" title="一、Langchain介绍"></a>一、Langchain介绍</h1><h2 id="1、功能介绍"><a href="#1、功能介绍" class="headerlink" title="1、功能介绍"></a>1、功能介绍</h2><blockquote><p>LangChain的作用如下:</p><ol><li>可以将 LLM 模型与外部数据源进行连接</li><li>提供一些组件可以更高效的和 LLM 模型进行交互。比如对向量数据库的支持。</li></ol></blockquote><p>langchain功能介绍：</p><p><img src="/eb6dbeb7/01.png" alt="image-20240724220925102"></p><h1 id="二、fastchat介绍"><a href="#二、fastchat介绍" class="headerlink" title="二、fastchat介绍"></a>二、fastchat介绍</h1><h2 id="1、命令行推理"><a href="#1、命令行推理" class="headerlink" title="1、命令行推理"></a>1、命令行推理</h2><hr><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">安装`pip3 install <span class="string">&quot;fschat[model_worker,webui]&quot;</span>`</span><br><span class="line">加载大模型推理 python -m fastchat.serve.cli --model-path /你的下载路径/chatglm2-6b</span><br><span class="line">linux:python -m fastchat.serve.cli --model-path /root/LangChain-ChatGLM-Webui/model/chatglm2-6b</span><br><span class="line">windows: python -m fastchat.serve.cli --model-path D:\project\LangChain-ChatGLM-Webui\model\chatglm2-6b</span><br><span class="line"> python -m fastchat.serve.cli --model-path D:\project\LangChain-ChatGLM-Webui\model\Qwen1<span class="number">.5</span>-<span class="number">1.8</span>B</span><br></pre></td></tr></table></figure><p><img src="/eb6dbeb7/02.png" alt="image-20240312095735966"></p><h2 id="2、web实现"><a href="#2、web实现" class="headerlink" title="2、web实现"></a>2、web实现</h2><hr><p>服务器ip <code>ifconfig</code>192.168.230.219</p><h3 id="（1）、启动-controller"><a href="#（1）、启动-controller" class="headerlink" title="（1）、启动 controller"></a>（1）、启动 controller</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m fastchat.serve.controller --host 192.168.230.219 --port 21001</span><br><span class="line">python -m fastchat.serve.controller --host 0.0.0.0</span><br></pre></td></tr></table></figure><h3 id="（2）、启动模型"><a href="#（2）、启动模型" class="headerlink" title="（2）、启动模型"></a>（2）、启动模型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 必须是本地ip </span><br><span class="line">python3 -m fastchat.serve.model_worker --load-8bit --model-names chatglm2-6b --model-path /data/models/chatglm3-6b-models --controller-address http://192.168.230.219:21001 --worker-address http://192.168.230.219:8080 --host 0.0.0.0 --port 8080 </span><br><span class="line">linux:python -m fastchat.serve.model_worker --model-path /root/LangChain-ChatGLM-Webui/model/chatglm2-6b --host 0.0.0.0 --load-8bit </span><br><span class="line">windows:python -m fastchat.serve.model_worker --model-names chatglm2-6b --model-path D:\project\LangChain-ChatGLM-Webui\model\chatglm2-6b --host 0.0.0.0  --load-8bit </span><br><span class="line">windows:python -m fastchat.serve.model_worker --model-names Qwen1.5-1.8B --model-path D:\project\LangChain-ChatGLM-Webui\model\Qwen1.5-1.8B --host 0.0.0.0  --load-8bit </span><br><span class="line">linux：python -m fastchat.serve.model_worker --model-names Qwen1.5-1.8B --model-path /root/LangChain-ChatGLM-Webui/model/Qwen1.5-1.8B --host 0.0.0.0  --load-8bit </span><br><span class="line">python3 -m fastchat.serve.modelworker --model-names &quot;qwen-api&quot; --model-path &quot;D:\project\LangChain-ChatGLM-Webui\api\qwen.py&quot;</span><br></pre></td></tr></table></figure><h3 id="（3）、openapi服务"><a href="#（3）、openapi服务" class="headerlink" title="（3）、openapi服务"></a>（3）、openapi服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m fastchat.serve.openai_api_server --controller-address http://172.17.0.2:21001 --host 0.0.0.0 --port 8000</span><br><span class="line">python -m fastchat.serve.openai_api_server --host 0.0.0.0</span><br><span class="line">python3 -m fastchat.serve.openai_api_server --host localhost --port 8000</span><br></pre></td></tr></table></figure><h3 id="（4）、gradio服务"><a href="#（4）、gradio服务" class="headerlink" title="（4）、gradio服务"></a>（4）、gradio服务</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gradio服务对gradio版本有要求</span></span><br><span class="line">linux:python -m fastchat.serve.gradio_web_server --host <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">windows:python -m fastchat.serve.gradio_web_server</span><br></pre></td></tr></table></figure><p>服务默认端口是 7860，可以通过<code>--port</code>参数来修改端口，还可以通过添加<code>--share</code>参数来开启 Gradio 的共享模式，这样就可以通过外网访问 WebUI 服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:7890</span><br><span class="line">curl http://localhost:8000/v1/models</span><br></pre></td></tr></table></figure><p><img src="/eb6dbeb7/03.png" alt="image-20240313202110620"></p><h1 id="三、Embeeding模型"><a href="#三、Embeeding模型" class="headerlink" title="三、Embeeding模型"></a>三、Embeeding模型</h1><p>Embedding 技术已经作为「基本操作」广泛应用于推荐、广告、搜索等互联网核心领域中。Embedding 是用一个低维稠密向量来表示一个对象，使得这个向量能够表达相应对象的某些特征，同时向量之间的距离能反应对象之间的相似性。我们要基于大模型搭建本地知识库，那就必须要用到Embeeding了，将文本数据转化成向量，只有转化成向量，才便于计算机处理。将这些向量存到数据库后，我们可以将要提的问题同样适用Embeeding转化为向量，然后就行语义相似度查询，获取相关的知识信息。</p><p>使用如下代码就可以轻松的将语言转化为向量：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sentence_transformers <span class="keyword">import</span> SentenceTransformer</span><br><span class="line"> </span><br><span class="line">model = SentenceTransformer(<span class="string">&#x27;all-mpnet-base-v2&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="四、向量数据库"><a href="#四、向量数据库" class="headerlink" title="四、向量数据库"></a>四、向量数据库</h1><p>上文提到，我们会将语句转化为的向量存储到数据库中，这个数据库就是向量数据库。向量数据库主要用于图像检索、音频检索、文本检索等领域，其主要特点是能够高效地存储和检索大规模的向量数据，它用了专门的数据结构和算法来处理向量之间的相似性计算和查询。 通过构建索引结构，向量数据库可以快速找到最相似的向量，以满足各种应用场景中的查询需求。</p><p>我们将一些文档信息，也就是知识，分块存到向量数据库中，对于用户的问题，使用 Embedding 的相似度进行语义搜索的技术。然后，我们将和问题语义最接近的前几条内容，作为提示语的一部分给到 AI，就相当于给AI配备一套知识库。</p><h1 id="五、实际案例实现"><a href="#五、实际案例实现" class="headerlink" title="五、实际案例实现"></a>五、实际案例实现</h1><h2 id="案例一：爬取网页并输出JSON数据"><a href="#案例一：爬取网页并输出JSON数据" class="headerlink" title="案例一：爬取网页并输出JSON数据"></a>案例一：爬取网页并输出JSON数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.prompts <span class="keyword">import</span> PromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> LLMRequestsChain, LLMChain</span><br><span class="line"><span class="keyword">from</span> langchain.chat_models <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">llm = ChatOpenAI(</span><br><span class="line">    streaming=<span class="literal">True</span>,</span><br><span class="line">    verbose=<span class="literal">True</span>,</span><br><span class="line">    <span class="comment"># callbacks=[callback],</span></span><br><span class="line">    openai_api_key=<span class="string">&quot;none&quot;</span>,</span><br><span class="line">    openai_api_base=<span class="string">&quot;http://127.0.0.1:8000/v1&quot;</span>,</span><br><span class="line">    model_name=<span class="string">&quot;Qwen1.5-1.8B&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造Prompt 模版</span></span><br><span class="line">template = <span class="string">&quot;&quot;&quot;在 &gt;&gt;&gt; 和 &lt;&lt;&lt; 之间是网页的返回的HTML内容。</span></span><br><span class="line"><span class="string">网页是新浪财经A股上市公司的公司简介。</span></span><br><span class="line"><span class="string">请抽取参数请求的信息。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>&#123;requests_result&#125; &lt;&lt;&lt;</span></span><br><span class="line"><span class="string">请使用如下的JSON格式返回数据</span></span><br><span class="line"><span class="string">&#123;&#123;</span></span><br><span class="line"><span class="string">  &quot;company_name&quot;:&quot;a&quot;,</span></span><br><span class="line"><span class="string">  &quot;company_english_name&quot;:&quot;b&quot;,</span></span><br><span class="line"><span class="string">  &quot;issue_price&quot;:&quot;c&quot;,</span></span><br><span class="line"><span class="string">  &quot;date_of_establishment&quot;:&quot;d&quot;,</span></span><br><span class="line"><span class="string">  &quot;registered_capital&quot;:&quot;e&quot;,</span></span><br><span class="line"><span class="string">  &quot;office_address&quot;:&quot;f&quot;,</span></span><br><span class="line"><span class="string">  &quot;Company_profile&quot;:&quot;g&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;&#125;</span></span><br><span class="line"><span class="string">Extracted:&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">prompt = PromptTemplate(</span><br><span class="line">    input_variables=[<span class="string">&quot;requests_result&quot;</span>],</span><br><span class="line">    template=template</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用LLMRequestsChain 访问Url</span></span><br><span class="line">chain = LLMRequestsChain(llm_chain=LLMChain(llm=llm, prompt=prompt))</span><br><span class="line">inputs = &#123;</span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://vip.stock.finance.sina.com.cn/corp/go.php/vCI_CorpInfo/stockid/600519.phtml&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = chain(inputs)</span><br><span class="line"><span class="built_in">print</span>(response[<span class="string">&#x27;output&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/eb6dbeb7/04.png" alt="image-20240724231552816"></p><h2 id="案例二：简单知识库问答"><a href="#案例二：简单知识库问答" class="headerlink" title="案例二：简单知识库问答"></a>案例二：简单知识库问答</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.chat_models <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> RecursiveCharacterTextSplitter</span><br><span class="line"><span class="keyword">from</span> langchain.document_loaders <span class="keyword">import</span> TextLoader</span><br><span class="line"><span class="keyword">from</span> langchain.document_loaders <span class="keyword">import</span> PyPDFLoader</span><br><span class="line"><span class="keyword">from</span> langchain.document_loaders <span class="keyword">import</span> Docx2txtLoader</span><br><span class="line"><span class="keyword">from</span> langchain.embeddings <span class="keyword">import</span> ModelScopeEmbeddings</span><br><span class="line"><span class="keyword">from</span> langchain.vectorstores <span class="keyword">import</span> Qdrant</span><br><span class="line"><span class="keyword">from</span> langchain.retrievers.multi_query <span class="keyword">import</span> MultiQueryRetriever </span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> RetrievalQA</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 连接本地部署的OpenAI服务</span></span><br><span class="line">model = ChatOpenAI(</span><br><span class="line">    streaming=<span class="literal">True</span>,</span><br><span class="line">    verbose=<span class="literal">True</span>,</span><br><span class="line">    callbacks=[],</span><br><span class="line">    openai_api_key=<span class="string">&quot;none&quot;</span>,</span><br><span class="line">    openai_api_base=<span class="string">&quot;http://127.0.0.1:8000/v1&quot;</span>,</span><br><span class="line">    model_name=<span class="string">&quot;Qwen-7B-Chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 加载Documents</span></span><br><span class="line">base_dir = <span class="string">&#x27;./files&#x27;</span> <span class="comment"># 文档的存放目录</span></span><br><span class="line">documents = []</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(base_dir): </span><br><span class="line">    <span class="comment"># 完整的文件路径</span></span><br><span class="line">    file_path = os.path.join(base_dir, file)</span><br><span class="line">    <span class="keyword">if</span> file.endswith(<span class="string">&#x27;.pdf&#x27;</span>):</span><br><span class="line">        loader = PyPDFLoader(file_path)</span><br><span class="line">        documents.extend(loader.load())</span><br><span class="line">    <span class="keyword">elif</span> file.endswith(<span class="string">&#x27;.docx&#x27;</span>):</span><br><span class="line">        loader = Docx2txtLoader(file_path)</span><br><span class="line">        documents.extend(loader.load())</span><br><span class="line">    <span class="keyword">elif</span> file.endswith(<span class="string">&#x27;.txt&#x27;</span>):</span><br><span class="line">        loader = TextLoader(file_path)</span><br><span class="line">        documents.extend(loader.load())</span><br><span class="line"> </span><br><span class="line">text_splitter = RecursiveCharacterTextSplitter(chunk_size=<span class="number">200</span>, chunk_overlap=<span class="number">10</span>) <span class="comment"># 文档分割器</span></span><br><span class="line">chunked_documents = text_splitter.split_documents(documents)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建 embeedings</span></span><br><span class="line">model_id = <span class="string">&quot;damo/nlp_corom_sentence-embedding_chinese-base&quot;</span></span><br><span class="line">embeddings = ModelScopeEmbeddings(</span><br><span class="line">    model_id=model_id)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 加载文档到向量数据库</span></span><br><span class="line">vectorstore = Qdrant.from_documents(</span><br><span class="line">    documents=chunked_documents, <span class="comment"># 以分块的文档</span></span><br><span class="line">    embedding=embeddings, <span class="comment"># 用OpenAI的Embedding Model做嵌入</span></span><br><span class="line">    location=<span class="string">&quot;:memory:&quot;</span>,  <span class="comment"># in-memory 存储</span></span><br><span class="line">    collection_name=<span class="string">&quot;documents&quot;</span>) <span class="comment"># 指定collection_name</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 构建一个MultiQueryRetriever</span></span><br><span class="line">retriever_from_llm = MultiQueryRetriever.from_llm(retriever=vectorstore.as_retriever(), llm=model)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 实例化一个RetrievalQA链</span></span><br><span class="line">qa_chain = RetrievalQA.from_chain_type(model, retriever=retriever_from_llm)</span><br><span class="line">result = qa_chain(<span class="string">&quot;填入你的问题&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>在上面代码中，首先连接本地部署的OpenAI服务，创建出了model，随后使用 RecursiveCharacterTextSplitter 进行文本分割，设置一个文档块大小为200，重叠字符长度为10。之后初始化Embeeding模型，并使用Qdrant作为向量数据库，读如文档数据并进行Embeeding将自然语言存储成向量。之后查询器使用了MultiQueryRetriever，其特点是使用语言模型从不同的视角为给定的用户输入查询生成多个查询。 然后使用这些查询来检索一组相关文档。下一步，使用RetrievalQA构建了一个Chain，作用是先检索后生成，即检索增强生成。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> llm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> llm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书生大模型闯关记录（第2关 Python基础知识）</title>
      <link href="//627c4bde.html"/>
      <url>//627c4bde.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="一-任务要求"><a href="#一-任务要求" class="headerlink" title="一.任务要求"></a>一.任务要求</h1><h2 id="1、任务一"><a href="#1、任务一" class="headerlink" title="1、任务一"></a>1、任务一</h2><p>请实现一个wordcount函数，统计英文字符串中每个单词出现的次数。返回一个字典，key为单词，value为对应单词出现的次数。</p><p>Eg:</p><p>Input:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Hello world!  </span></span><br><span class="line"><span class="string">This is an example.  </span></span><br><span class="line"><span class="string">Word count is fun.  </span></span><br><span class="line"><span class="string">Is it fun to count words?  </span></span><br><span class="line"><span class="string">Yes, it is fun!&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;hello&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;world&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;this&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;is&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;an&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;example&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;word&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">2</span>,</span><br><span class="line"><span class="string">&#x27;fun&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;it&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;to&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;words&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;yes&#x27;</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><p>TIPS：记得先去掉标点符号,然后把每个单词转换成小写。不需要考虑特别多的标点符号，只需要考虑实例输入中存在的就可以。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Got this panda plush toy for my daughter&#x27;s birthday,</span></span><br><span class="line"><span class="string">who loves it and takes it everywhere. It&#x27;s soft and</span></span><br><span class="line"><span class="string">super cute, and its face has a friendly look. It&#x27;s</span></span><br><span class="line"><span class="string">a bit small for what I paid though. I think there</span></span><br><span class="line"><span class="string">might be other options that are bigger for the</span></span><br><span class="line"><span class="string">same price. It arrived a day earlier than expected,</span></span><br><span class="line"><span class="string">so I got to play with it myself before I gave it</span></span><br><span class="line"><span class="string">to her.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wordcount</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="2、任务二"><a href="#2、任务二" class="headerlink" title="2、任务二"></a>2、任务二</h2><p>请使用本地vscode连接远程开发机，将上面你写的wordcount函数在开发机上进行debug，体验debug的全流程，并完成一份debug笔记(需要截图)。</p><h1 id="二、任务实现步骤"><a href="#二、任务实现步骤" class="headerlink" title="二、任务实现步骤"></a>二、任务实现步骤</h1><h2 id="1-任务一实现"><a href="#1-任务一实现" class="headerlink" title="1.任务一实现"></a>1.任务一实现</h2><p>按照第一关形式，进入<a href="https://studio.intern-ai.org.cn/%E5%88%9B%E5%BB%BA%E5%BC%80%E5%8F%91%E6%9C%BA%EF%BC%8C%E6%9C%AC%E5%9C%B0vscode%E8%BF%9B%E8%A1%8C%E8%BF%9E%E6%8E%A5%EF%BC%8C%E8%BF%9E%E6%8E%A5%E7%BB%93%E6%9E%9C%E5%9B%BE%E5%A6%82%E4%B8%8B">https://studio.intern-ai.org.cn/创建开发机，本地vscode进行连接，连接结果图如下</a>:</p><p><img src="/627c4bde/1.png" alt="image-20240722190331823"></p><p>点击按钮进入开发机页面：</p><p><img src="/627c4bde/2.png" alt="image-20240722190425108"></p><p>在开发机页面中新建demo.py文件进行测试，代码如下：</p><blockquote><p>这里也可以用正则实现</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">text = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Got this panda plush toy for my daughter&#x27;s birthday,</span></span><br><span class="line"><span class="string">who loves it and takes it everywhere. It&#x27;s soft and</span></span><br><span class="line"><span class="string">super cute, and its face has a friendly look. It&#x27;s</span></span><br><span class="line"><span class="string">a bit small for what I paid though. I think there</span></span><br><span class="line"><span class="string">might be other options that are bigger for the</span></span><br><span class="line"><span class="string">same price. It arrived a day earlier than expected,</span></span><br><span class="line"><span class="string">so I got to play with it myself before I gave it</span></span><br><span class="line"><span class="string">to her.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wordcount</span>(<span class="params">text</span>):</span><br><span class="line">    lower_text = text.lower()</span><br><span class="line">    words_list = lower_text.replace(<span class="string">&quot;.&quot;</span>,<span class="string">&quot; &quot;</span>).replace(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;&#x27;</span>).split()</span><br><span class="line">    final_word = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words_list:</span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">in</span> final_word:</span><br><span class="line">            final_word[word] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            final_word[word] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> final_word</span><br><span class="line"></span><br><span class="line">result = wordcount(text)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>终端输入<code>python demo2.py</code>运行即可</p><p><img src="/627c4bde/3.png" alt="image-20240722190623432"></p><h2 id="2、任务二实现"><a href="#2、任务二实现" class="headerlink" title="2、任务二实现"></a>2、任务二实现</h2><p>1、在vscode中选择<code>run and debug</code>,发现需要安装<code>python extension</code></p><p><img src="/627c4bde/4.png" alt="image-20240722190947761"></p><p>2.在插件商店找到对应<code>python</code>扩展，安装</p><p><img src="/627c4bde/5.png" alt="image-20240722191412693"></p><p>3.安装完成后，设置断点，debugger选择第一个，配置选择默认即可</p><p><img src="/627c4bde/6.png"></p><p><img src="/627c4bde/7.png" alt="image-20240722191829200"></p><p>4.debug查看</p><blockquote><p>在左侧查看断点情况，代码上方进行操作，代码数字左侧设置断点</p></blockquote><p><img src="/627c4bde/8.png" alt="image-20240722192318297"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> llm </category>
          
          <category> internlm训练营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书生大模型闯关记录（第1关 Linux 基础知识）</title>
      <link href="//866244c8.html"/>
      <url>//866244c8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="一、开发环境介绍"><a href="#一、开发环境介绍" class="headerlink" title="一、开发环境介绍"></a>一、开发环境介绍</h1><h2 id="1、创建开发机"><a href="#1、创建开发机" class="headerlink" title="1、创建开发机"></a>1、创建开发机</h2><h2 id="（1-、登录InternStudio平台创建环境"><a href="#（1-、登录InternStudio平台创建环境" class="headerlink" title="（1)、登录InternStudio平台创建环境"></a>（1)、登录InternStudio平台创建环境</h2><p>1、登录<a href="https://studio.intern-ai.org.cn/%E7%BD%91%E7%AB%99%EF%BC%8C%E6%89%93%E5%BC%80%E9%A6%96%E9%A1%B5%EF%BC%8C%E5%88%9B%E5%BB%BA%E5%BC%80%E5%8F%91%E6%9C%BA">https://studio.intern-ai.org.cn/网站，打开首页，创建开发机</a></p><p><img src="/866244c8/1.png" alt="image-20240721233024132"></p><p>2、填写相关配置信息创建开发机</p><p><img src="/866244c8/2.png" alt="image-20240721233101796"></p><p>3、等待开发机创建完成，如图所示</p><p><img src="/866244c8/3.png" alt="image-20240721233140288"></p><p>4、进入开发机，页面显示如图</p><p><img src="/866244c8/4.png" alt="image-20240721233322349"></p><h1 id="二、实现端口映射"><a href="#二、实现端口映射" class="headerlink" title="二、实现端口映射"></a>二、实现端口映射</h1><h2 id="1、SSH连接实现"><a href="#1、SSH连接实现" class="headerlink" title="1、SSH连接实现"></a>1、SSH连接实现</h2><p>1、找到开发机&gt;SSH连接，点击进入</p><p><img src="/866244c8/5.png" alt="image-20240721233640917"></p><p>2、复制连接的登录命令和密码</p><p><img src="/866244c8/6.png" alt="image-20240721233734525"></p><p>3.Windows打开终端命令行，将登入命令复制到命令行，出现下面框框表示连接成功</p><blockquote><p>这里我windows提前配置的SSH KEY所以没有登录密码验证，如果出现密码验证复制上面的密码即可</p></blockquote><p>设置密码验证方法：</p><p>但是在我们开发学习的时候，每次远程都输入密码比较麻烦，我们可以设置SSH key来跳过输入密码这一步骤，在ssh命令中我们可以使用<strong>ssh-keygen</strong>命令来生成密钥</p><blockquote><p>如果大家计算机的用户名是中文的，InternStudio会识别不了，这种情况就需要用密码来登录SSH，不过不影响使用，大家不用担心。</p></blockquote><blockquote><p>SSH密钥是一种安全便捷的登录认证方式，用于在SSH协议中进行身份验证和加密通信。</p></blockquote><p>指定端口映射</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -CNg -L 6006:127.0.0.1:6006 root@ssh.intern-ai.org.cn -p 你的 ssh 端口号</span><br></pre></td></tr></table></figure><p><strong>ssh-keygen</strong>支持RSA和DSA两种认证密钥。</p><p>常用参数包括：</p><ul><li>-t：指定密钥类型，如dsa、ecdsa、ed25519、rsa。</li><li>-b：指定密钥长度。</li><li>-C：添加注释。</li><li>-f：指定保存密钥的文件名。</li><li>-i：读取未加密的ssh-v2兼容的私钥&#x2F;公钥文件。</li></ul><p>这里我们使用RSA算法生成密钥，命令为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>输入命令后<strong>一路回车</strong>就可以了，这里的密钥默认情况下是生成在<code>~/.ssh/</code>目录下的，<code>~</code>表示的是家目录，如果是windows就是<code>C:\Users\&#123;your_username&#125;\</code>。在powerShell中可以使用<code>Get-Content</code>命令查看生成的密钥，如果是linux操作系统可以使用<code>cat</code>命令。</p><p><img src="/866244c8/7.png" alt="image-20240721233817120"></p><p>4、对应功能测试，可以在命令行输入命令测试</p><p><img src="/866244c8/8.png" alt="image-20240721234105097"></p><h2 id="2、vscode连接实现"><a href="#2、vscode连接实现" class="headerlink" title="2、vscode连接实现"></a>2、vscode连接实现</h2><h3 id="（1）、安装远程连接插件Remote-ssh"><a href="#（1）、安装远程连接插件Remote-ssh" class="headerlink" title="（1）、安装远程连接插件Remote -ssh"></a>（1）、安装远程连接插件Remote -ssh</h3><p><img src="/866244c8/9.png" alt="image-20240721234321518"></p><h3 id="2-、点击加号添加开发机SSH连接的登录命令"><a href="#2-、点击加号添加开发机SSH连接的登录命令" class="headerlink" title="(2)、点击加号添加开发机SSH连接的登录命令"></a>(2)、点击加号添加开发机SSH连接的登录命令</h3><p>1、复制上面的SSH连接的登录命令</p><p><img src="/866244c8/10.png" alt="image-20240721234511521"></p><p>2、出现提示</p><p><img src="/866244c8/11.png" alt="image-20240721234615319"></p><p>表示已经连接成功</p><p>3、选择Linux</p><p><img src="/866244c8/12.png" alt="image-20240721234654983"></p><p>如果出现</p><p><img src="/866244c8/13.png" alt="image-20240721234914435"></p><p>可能需要终止原来的连接（windows命令行执行exit，exit两次）</p><p>4、出现开发机的根目录</p><p><img src="/866244c8/14.png" alt="image-20240721234752861"></p><p>此时</p><p><img src="/866244c8/15.png" alt="image-20240721234828273"></p><h2 id="三、使用端口映射实现本地访问helloworld-py"><a href="#三、使用端口映射实现本地访问helloworld-py" class="headerlink" title="三、使用端口映射实现本地访问helloworld.py"></a>三、使用端口映射实现本地访问helloworld.py</h2><h2 id="1、新建一个py文件"><a href="#1、新建一个py文件" class="headerlink" title="1、新建一个py文件"></a>1、新建一个py文件</h2><p>在root新建一个helloworld.py文件，代码如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> gradio <span class="keyword">as</span> gr</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 获取主机名</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hostname</span>():</span><br><span class="line">    hostname = socket.gethostname()</span><br><span class="line">    <span class="keyword">match</span> = re.search(<span class="string">r&#x27;-(\d+)$&#x27;</span>, hostname)</span><br><span class="line">    name = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建 Gradio 界面</span></span><br><span class="line"><span class="keyword">with</span> gr.Blocks(gr.themes.Soft()) <span class="keyword">as</span> demo:</span><br><span class="line">    html_code = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            &lt;p align=&quot;center&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;https://intern-ai.org.cn/home&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;img src=&quot;https://intern-ai.org.cn/assets/headerLogo-4ea34f23.svg&quot; alt=&quot;Logo&quot; width=&quot;20%&quot; style=&quot;border-radius: 5px;&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;h1 style=&quot;text-align: center;&quot;&gt;☁️ Welcome <span class="subst">&#123;get_hostname()&#125;</span> user, welcome to the ShuSheng LLM Practical Camp Course!&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            &lt;h2 style=&quot;text-align: center;&quot;&gt;😀 Let’s go on a journey through ShuSheng Island together.&lt;/h2&gt;</span></span><br><span class="line"><span class="string">            &lt;p align=&quot;center&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;a href=&quot;https://github.com/InternLM/Tutorial/blob/camp3&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;img src=&quot;https://oss.lingkongstudy.com.cn/blog/202406301604074.jpg&quot; alt=&quot;Logo&quot; width=&quot;20%&quot; style=&quot;border-radius: 5px;&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">    gr.Markdown(html_code)</span><br><span class="line"></span><br><span class="line">demo.launch()</span><br></pre></td></tr></table></figure><h2 id="2、使用端口映射"><a href="#2、使用端口映射" class="headerlink" title="2、使用端口映射"></a>2、使用端口映射</h2><p>1、windows连接开发机</p><p><img src="/866244c8/16.png" alt="image-20240721235413175"></p><p>2.运行代码，需要先安装gradio库，<code>pip install gradio=4.29.0</code>后运行<code>python helloworld.py</code></p><p><img src="/866244c8/17.png" alt="image-20240721235553735"></p><p>3、打开网页即可访问</p><p><img src="/866244c8/18.png" alt="image-20240721235447077"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> llm </category>
          
          <category> internlm训练营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫项目豆瓣top250可视化（一）</title>
      <link href="//3abd4025.html"/>
      <url>//3abd4025.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="一、豆瓣网站信息爬取"><a href="#一、豆瓣网站信息爬取" class="headerlink" title="一、豆瓣网站信息爬取"></a>一、豆瓣网站信息爬取</h1><p>最简单的代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.douban.com/&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36 Edg/126.0.0.0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url,headers=headers)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p>抓取效果：</p><p><img src="/3abd4025/html.png" alt="image-20240719234130043"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> python </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crawler python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react后台管理项目（一）</title>
      <link href="//1319ac05.html"/>
      <url>//1319ac05.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="一、配置路由"><a href="#一、配置路由" class="headerlink" title="一、配置路由"></a>一、配置路由</h1><h2 id="1、下载相关依赖"><a href="#1、下载相关依赖" class="headerlink" title="1、下载相关依赖"></a>1、下载相关依赖</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i react-router-dom@<span class="number">6.22</span><span class="number">.2</span></span><br></pre></td></tr></table></figure><blockquote><p>路由配置必备，这里采用createBrowserRouter方法配置路由</p></blockquote><h2 id="2、router下index文件"><a href="#2、router下index文件" class="headerlink" title="2、router下index文件"></a>2、router下index文件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  &#123;createBrowserRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Main</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/main&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="title class_">Component</span>: <span class="title class_">Main</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">                <span class="title class_">Component</span>: <span class="title class_">Home</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createBrowserRouter</span>(routes)</span><br></pre></td></tr></table></figure><h2 id="3、Main页面Main-js"><a href="#3、Main页面Main-js" class="headerlink" title="3、Main页面Main.js"></a>3、Main页面Main.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Outlet</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Main</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            main</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Main</span> </span><br></pre></td></tr></table></figure><h2 id="4、-home页面home-js"><a href="#4、-home页面home-js" class="headerlink" title="4、 home页面home.js"></a>4、 home页面home.js</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React  from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">const Home = () =&gt;&#123;</span><br><span class="line">    return(</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        home页面</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line">export default Home</span><br></pre></td></tr></table></figure><h2 id="5、挂载到页面app-js"><a href="#5、挂载到页面app-js" class="headerlink" title="5、挂载到页面app.js"></a>5、挂载到页面app.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">RouterProvider</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ClassName</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">RouterProvider</span> <span class="attr">router</span>=<span class="string">&#123;router&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="二、剩余页面路由配置和重定向功能实现"><a href="#二、剩余页面路由配置和重定向功能实现" class="headerlink" title="二、剩余页面路由配置和重定向功能实现"></a>二、剩余页面路由配置和重定向功能实现</h1><h2 id="1-user页面实现，user下的js文件"><a href="#1-user页面实现，user下的js文件" class="headerlink" title="1.user页面实现，user下的js文件"></a>1.user页面实现，user下的js文件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">User</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            用户配置</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">User</span></span><br></pre></td></tr></table></figure><h2 id="2、mall页面实现，mall目录下的js文件"><a href="#2、mall页面实现，mall目录下的js文件" class="headerlink" title="2、mall页面实现，mall目录下的js文件"></a>2、mall页面实现，mall目录下的js文件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Mall</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            mall页面</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Mall</span></span><br></pre></td></tr></table></figure><h2 id="3、other页面下的内容实现"><a href="#3、other页面下的内容实现" class="headerlink" title="3、other页面下的内容实现"></a>3、other页面下的内容实现</h2><h3 id="（1）、pageone页面"><a href="#（1）、pageone页面" class="headerlink" title="（1）、pageone页面"></a>（1）、pageone页面</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">PageOne</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Pageone页面</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">PageOne</span></span><br></pre></td></tr></table></figure><h3 id="（2-、pagetwo页面实现"><a href="#（2-、pagetwo页面实现" class="headerlink" title="（2)、pagetwo页面实现"></a>（2)、pagetwo页面实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">PageTwo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            pagetwo页面</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">PageTwo</span></span><br></pre></td></tr></table></figure><h2 id="4、重定向实现"><a href="#4、重定向实现" class="headerlink" title="4、重定向实现"></a>4、重定向实现</h2><p>添加跳转逻辑Navigate实现</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;home&quot;</span> <span class="attr">replace</span>/&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>router下index.js完整代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createBrowserRouter, <span class="title class_">Navigate</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Main</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/main&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/user&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Mall</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/mall&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PageTwo</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/other/pagetwo&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PageOne</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/other/pageone&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes =[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="title class_">Component</span>: <span class="title class_">Main</span>,</span><br><span class="line">        <span class="attr">children</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">                <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;home&quot;</span> <span class="attr">replace</span>/&gt;</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">                <span class="title class_">Component</span>: <span class="title class_">Home</span></span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;mall&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="title class_">Mall</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">                <span class="attr">componnent</span>: <span class="title class_">User</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;other&#x27;</span>,</span><br><span class="line">                <span class="attr">children</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">path</span>: <span class="string">&#x27;pageone&#x27;</span>,</span><br><span class="line">                        <span class="title class_">Component</span>: <span class="title class_">PageOne</span></span><br><span class="line">                        </span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">path</span>: <span class="string">&#x27;pagetwo&#x27;</span>,</span><br><span class="line">                        <span class="title class_">Component</span>: <span class="title class_">PageTwo</span></span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createBrowserRouter</span>(routes)</span><br></pre></td></tr></table></figure><h1 id="三、layout布局组件引入和aside组件拆分"><a href="#三、layout布局组件引入和aside组件拆分" class="headerlink" title="三、layout布局组件引入和aside组件拆分"></a>三、layout布局组件引入和aside组件拆分</h1><h2 id="1、在antd网站上找到合适的布局模板，这里选择自定义触发器"><a href="#1、在antd网站上找到合适的布局模板，这里选择自定义触发器" class="headerlink" title="1、在antd网站上找到合适的布局模板，这里选择自定义触发器"></a>1、在antd网站上找到合适的布局模板，这里选择自定义触发器</h2><p>将代码替换main,js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">MenuFoldOutlined</span>,</span><br><span class="line">  <span class="title class_">MenuUnfoldOutlined</span>,</span><br><span class="line">  <span class="title class_">UploadOutlined</span>,</span><br><span class="line">  <span class="title class_">UserOutlined</span>,</span><br><span class="line">  <span class="title class_">VideoCameraOutlined</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/icons&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span>, <span class="title class_">Layout</span>, <span class="title class_">Menu</span>, theme &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Header</span>, <span class="title class_">Sider</span>, <span class="title class_">Content</span> &#125; = <span class="title class_">Layout</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Main</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [collapsed, setCollapsed] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="attr">token</span>: &#123; colorBgContainer, borderRadiusLG &#125;,</span><br><span class="line">  &#125; = theme.<span class="title function_">useToken</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Layout</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Sider</span> <span class="attr">trigger</span>=<span class="string">&#123;null&#125;</span> <span class="attr">collapsible</span> <span class="attr">collapsed</span>=<span class="string">&#123;collapsed&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;demo-logo-vertical&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Menu</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">theme</span>=<span class="string">&quot;dark&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">mode</span>=<span class="string">&quot;inline&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">defaultSelectedKeys</span>=<span class="string">&#123;[</span>&#x27;<span class="attr">1</span>&#x27;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">items</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">key:</span> &#x27;<span class="attr">1</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">icon:</span> &lt;<span class="attr">UserOutlined</span> /&gt;</span>,</span></span><br><span class="line"><span class="language-xml">              label: &#x27;nav 1&#x27;,</span></span><br><span class="line"><span class="language-xml">            &#125;,</span></span><br><span class="line"><span class="language-xml">            &#123;</span></span><br><span class="line"><span class="language-xml">              key: &#x27;2&#x27;,</span></span><br><span class="line"><span class="language-xml">              icon: <span class="tag">&lt;<span class="name">VideoCameraOutlined</span> /&gt;</span>,</span></span><br><span class="line"><span class="language-xml">              label: &#x27;nav 2&#x27;,</span></span><br><span class="line"><span class="language-xml">            &#125;,</span></span><br><span class="line"><span class="language-xml">            &#123;</span></span><br><span class="line"><span class="language-xml">              key: &#x27;3&#x27;,</span></span><br><span class="line"><span class="language-xml">              icon: <span class="tag">&lt;<span class="name">UploadOutlined</span> /&gt;</span>,</span></span><br><span class="line"><span class="language-xml">              label: &#x27;nav 3&#x27;,</span></span><br><span class="line"><span class="language-xml">            &#125;,</span></span><br><span class="line"><span class="language-xml">          ]&#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Sider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Layout</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Header</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">padding:</span> <span class="attr">0</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">background:</span> <span class="attr">colorBgContainer</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">icon</span>=<span class="string">&#123;collapsed</span> ? &lt;<span class="attr">MenuUnfoldOutlined</span> /&gt;</span> : <span class="tag">&lt;<span class="name">MenuFoldOutlined</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">            onClick=&#123;() =&gt; setCollapsed(!collapsed)&#125;</span></span><br><span class="line"><span class="language-xml">            style=&#123;&#123;</span></span><br><span class="line"><span class="language-xml">              fontSize: &#x27;16px&#x27;,</span></span><br><span class="line"><span class="language-xml">              width: 64,</span></span><br><span class="line"><span class="language-xml">              height: 64,</span></span><br><span class="line"><span class="language-xml">            &#125;&#125;</span></span><br><span class="line"><span class="language-xml">          /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Content</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">margin:</span> &#x27;<span class="attr">24px</span> <span class="attr">16px</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">padding:</span> <span class="attr">24</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">minHeight:</span> <span class="attr">280</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">background:</span> <span class="attr">colorBgContainer</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">borderRadius:</span> <span class="attr">borderRadiusLG</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          Content</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Main</span>;</span><br></pre></td></tr></table></figure><p>网站展示如下：</p><p><img src="/1319ac05/layout.png" alt="layout"></p><h2 id="2、引入样式进行渲染，同时增加h3标题样式"><a href="#2、引入样式进行渲染，同时增加h3标题样式" class="headerlink" title="2、引入样式进行渲染，同时增加h3标题样式"></a>2、引入样式进行渲染，同时增加h3标题样式</h2><p>在sider组件下增加标题显示</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h3 className=&quot;app-name&quot;&gt;通用后台管理系统&lt;/h3&gt;</span><br></pre></td></tr></table></figure><p>组件Menu增加样式,填充整个页面</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">style=&#123;&#123;</span><br><span class="line">  <span class="attr">height</span>: <span class="string">&#x27;100%&#x27;</span></span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p>修改后显示</p><p><img src="/1319ac05/layout2.png" alt="image-20240719231655785"></p>]]></content>
      
      
      <categories>
          
          <category> 框架和库 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习</title>
      <link href="//caad5a82.html"/>
      <url>//caad5a82.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="一-前期软件准备"><a href="#一-前期软件准备" class="headerlink" title="一.前期软件准备"></a>一.前期软件准备</h1><h2 id="vs-code安装"><a href="#vs-code安装" class="headerlink" title="vs code安装"></a>vs code安装</h2><p>Google搜索vs code</p><p><img src="/caad5a82/001.png" alt="image-20231008223011703"></p><p>选择第一个直接安装，我这里选择Windows系统</p><h2 id="jdk安装"><a href="#jdk安装" class="headerlink" title="jdk安装"></a>jdk安装</h2><p>Google搜jdk oracle</p><p><img src="/caad5a82/002.png" alt="002"></p><h1 id="第二部分-实现功能"><a href="#第二部分-实现功能" class="headerlink" title="第二部分 实现功能"></a>第二部分 实现功能</h1><h2 id="新建java文件，例如-na-java"><a href="#新建java文件，例如-na-java" class="headerlink" title="新建java文件，例如 na.java"></a>新建java文件，例如 na.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">na</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello java&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="终端输入下面代码"><a href="#终端输入下面代码" class="headerlink" title="终端输入下面代码"></a>终端输入下面代码</h2><p><code>javac na.java</code></p><p><code>java hello</code></p><p>即可得到输出</p><p>hello java</p><h1 id="第三部分-数据类型"><a href="#第三部分-数据类型" class="headerlink" title="第三部分 数据类型"></a>第三部分 数据类型</h1><h2 id="注解-给人看的文字"><a href="#注解-给人看的文字" class="headerlink" title="注解 (给人看的文字)"></a>注解 (给人看的文字)</h2><ul><li><p>单行注解示范：</p><p>&#x2F;&#x2F; 注解内容</p></li><li><p>多行注解示范:<br>&#x2F;*<br>    第一行注解<br>    第二行注解<br>*&#x2F;</p></li></ul><h2 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h2><ul><li>整型: byte,short,int,long</li><li>浮点数: float,double</li><li>布林值：boolen</li><li>字元： char</li><li>字串： String</li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>在vscode里面创建DataTypeVarible.java文件，输入以下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataTypeVariable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">// 在终端中打印各种类型的资料</span></span><br><span class="line">        <span class="comment">// 整型 预设为int </span></span><br><span class="line">        System.out.println(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="number">120</span>);</span><br><span class="line">        <span class="comment">// 变量x的使用</span></span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        x=<span class="number">3</span>;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">        x=<span class="number">120</span>;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">        <span class="comment">// 长整型 数字的后面加上l</span></span><br><span class="line">        System.out.println(<span class="number">2000000000L</span>);</span><br><span class="line">        <span class="comment">// 什么形式，应该对应什么形式，所以应该为long y而不是int y</span></span><br><span class="line">        <span class="type">long</span> y=<span class="number">200000000000L</span>;</span><br><span class="line">        System.out.println(y);</span><br><span class="line">        <span class="comment">// 浮点数，预设为double类型 double</span></span><br><span class="line">        System.out.println(<span class="number">3.14564965</span>);</span><br><span class="line">        <span class="comment">// 单精度浮点数 数字后面加上 F 只能到小数点后7位数 float</span></span><br><span class="line">        System.out.println(<span class="number">3.141595233F</span>);</span><br><span class="line">        <span class="comment">// 布林值 boolean</span></span><br><span class="line">        System.out.println(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 字元 char</span></span><br><span class="line">        System.out.println(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="comment">// 字符串 String</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hello 你好呀&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终端执行javac DaTaTypeVarible,java进行编译</p><p>终端执行java DataTypeVarible.java运行代码</p><p><img src="/caad5a82/image-20231010094132100.png" alt="image-20231010094132100"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
