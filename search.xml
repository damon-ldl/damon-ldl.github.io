<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>linux</title>
      <link href="//9211474f.html"/>
      <url>//9211474f.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python学习</title>
      <link href="//fbaff1b6.html"/>
      <url>//fbaff1b6.html</url>
      
        <content type="html"><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="pip升级命令"><a href="#pip升级命令" class="headerlink" title="pip升级命令"></a>pip升级命令</h2><p>遇到了类似提示则需要升级<code>PIP</code><br>You are using pip version 9.0.3, however version 18.0 is available.<br>You should consider upgrading via the ‘pip install –upgrade pip’ command.<br>此时需要升级<code>pip</code>，命令为：</p><pre><code class="python">pip install -upgrade pip 或者 pip install -U pip</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo文章标签无法显示</title>
      <link href="//3c51531d.html"/>
      <url>//3c51531d.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-butterfly里面，文章目录和标签无法显示"><a href="#hexo-butterfly里面，文章目录和标签无法显示" class="headerlink" title="hexo+butterfly里面，文章目录和标签无法显示"></a>hexo+butterfly里面，文章目录和标签无法显示</h1><p>本地在网站根目录执行程序</p><pre><code>hexo new page categorieshexo new page tags</code></pre><h2 id="之后可以打开网页但无内容"><a href="#之后可以打开网页但无内容" class="headerlink" title="之后可以打开网页但无内容"></a>之后可以打开网页但无内容</h2><h1 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h1><p> 找到运行 <code>hexo new page categories</code>之后本地文件Hexo\source 目录中会生成一个 categories 文件夹，文件夹内有一个 index.md 文件，打开此文件，将其中的 <code>type</code> 修改为 <code>categories</code> 即可。<br> 如</p><pre><code>title: 分类date: 2023-10-11 20:26:34type: &quot;categories&quot;</code></pre><p>即可达到要求</p><pre><code>title: tagsdate: 2023-10-11 20:26:34type: &quot;tags&quot;</code></pre><p>同理可以设置标签</p><p>为文章设置目录可参考：</p><pre><code>---title: 这里是文章的标题date: 这里是发表时间，如：2023-10-11 08:15:16description: 这里填写摘要。categories:- 分类- 子分类tags:- 标签1- 标签2---</code></pre><p>这样就可以设置标签和分类并显示了。</p>]]></content>
      
      
      <categories>
          
          <category> errors </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络连接错误解决方案</title>
      <link href="//b9040b7b.html"/>
      <url>//b9040b7b.html</url>
      
        <content type="html"><![CDATA[<h1 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h1><p>**fatal: unable to access ‘**无法连接互联网</p><p>需要设置相关代理信息解决问题</p><h1 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h1><ol><li><strong>检查网络连接</strong>：确保你的计算机正常连接到互联网。尝试在浏览器中打开其他网站，以确保你的网络连接正常。</li><li><strong>防火墙和安全软件</strong>：有时，防火墙或安全软件可能会阻止 Git 与外部服务器建立连接。请检查你的防火墙设置，并确保 Git 被允许通过防火墙。</li><li><strong>代理设置</strong>：如果你在一个受限制的网络环境中，可能需要配置 Git 使用代理服务器。你可以使用以下命令配置 Git 使用代理：</li></ol><pre><code>git config --global http.proxy http://your-proxy-server:portgit config --global https.proxy https://your-proxy-server:port</code></pre><p>将 “your-proxy-server” 和 “port” 替换为你的代理服务器地址和端口号。</p><p>寻找电脑代理信息，点击<strong>设置</strong>，打开里面<strong>代理</strong>，可以看到代理具体信息，如：</p><p><img src="/b9040b7b/001.png" alt="image-20231010111358051"></p><p>从中可以得到我的地址和端口，按照要求更改代码即可</p><pre><code># 配置 Git 使用 HTTP 代理git config --global http.proxy http://127.0.0.1:7896</code></pre><p>配置完成后即可正常访问</p>]]></content>
      
      
      <categories>
          
          <category> errors </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>照片</title>
      <link href="//44276cb2.html"/>
      <url>//44276cb2.html</url>
      
        <content type="html"><![CDATA[<p><img src="/44276cb2/001.png" alt="G"></p><p><img src="/44276cb2/002.png" alt="Anime 3290x1792 Honkai: Star Rail artwork Bronya Rand anime girls rifles castle Nid417 reflection cathedral interior looking at viewer standing"></p><p><img src="/44276cb2/004.jpg" alt="004"></p><p><img src="/44276cb2/003.jpg" alt="003"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 相册 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习</title>
      <link href="//caad5a82.html"/>
      <url>//caad5a82.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-前期软件准备"><a href="#一-前期软件准备" class="headerlink" title="一.前期软件准备"></a>一.前期软件准备</h1><h2 id="vs-code安装"><a href="#vs-code安装" class="headerlink" title="vs code安装"></a>vs code安装</h2><p>Google搜索vs code</p><p><img src="/caad5a82/001.png" alt="image-20231008223011703"></p><p>选择第一个直接安装，我这里选择Windows系统</p><h2 id="jdk安装"><a href="#jdk安装" class="headerlink" title="jdk安装"></a>jdk安装</h2><p>Google搜jdk oracle</p><p><img src="/caad5a82/002.png" alt="002"></p><h1 id="第二部分-实现功能"><a href="#第二部分-实现功能" class="headerlink" title="第二部分 实现功能"></a>第二部分 实现功能</h1><h2 id="新建java文件，例如-na-java"><a href="#新建java文件，例如-na-java" class="headerlink" title="新建java文件，例如 na.java"></a>新建java文件，例如 na.java</h2><pre><code class="java">public class na &#123;    public static void main(String[] args) &#123;        System.out.println(&quot;hello java&quot;);    &#125;&#125;</code></pre><h2 id="终端输入下面代码"><a href="#终端输入下面代码" class="headerlink" title="终端输入下面代码"></a>终端输入下面代码</h2><p><code>javac na.java</code></p><p><code>java hello</code></p><p>即可得到输出</p><p>hello java</p><h1 id="第三部分-数据类型"><a href="#第三部分-数据类型" class="headerlink" title="第三部分 数据类型"></a>第三部分 数据类型</h1><h2 id="注解-给人看的文字"><a href="#注解-给人看的文字" class="headerlink" title="注解 (给人看的文字)"></a>注解 (给人看的文字)</h2><ul><li><p>单行注解示范：</p><p>&#x2F;&#x2F; 注解内容</p></li><li><p>多行注解示范:<br>&#x2F;*<br>    第一行注解<br>    第二行注解<br>*&#x2F;</p></li></ul><h2 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h2><ul><li>整型: byte,short,int,long</li><li>浮点数: float,double</li><li>布林值：boolen</li><li>字元： char</li><li>字串： String</li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>在vscode里面创建DataTypeVarible.java文件，输入以下代码：</p><pre><code class="java">public class DataTypeVariable&#123;    public static void main(String[] args)&#123;        // 在终端中打印各种类型的资料        // 整型 预设为int         System.out.println(3);        System.out.println(120);        // 变量x的使用        int x;        x=3;        System.out.println(x);        x=120;        System.out.println(x);        // 长整型 数字的后面加上l        System.out.println(2000000000L);        // 什么形式，应该对应什么形式，所以应该为long y而不是int y        long y=200000000000L;        System.out.println(y);        // 浮点数，预设为double类型 double        System.out.println(3.14564965);        // 单精度浮点数 数字后面加上 F 只能到小数点后7位数 float        System.out.println(3.141595233F);        // 布林值 boolean        System.out.println(false);        // 字元 char        System.out.println(&#39;a&#39;);        // 字符串 String        System.out.println(&quot;hello 你好呀&quot;);    &#125;&#125;</code></pre><p>终端执行javac DaTaTypeVarible,java进行编译</p><p>终端执行java DataTypeVarible.java运行代码</p><p><img src="/caad5a82/image-20231010094132100.png" alt="image-20231010094132100"></p>]]></content>
      
      
      <categories>
          
          <category> 学习资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调用chatglm模型</title>
      <link href="//144c4b6.html"/>
      <url>//144c4b6.html</url>
      
        <content type="html"><![CDATA[<h1 id="通过anaconda实现本地访问chatglm"><a href="#通过anaconda实现本地访问chatglm" class="headerlink" title="通过anaconda实现本地访问chatglm"></a>通过anaconda实现本地访问chatglm</h1><h2 id="安装python库"><a href="#安装python库" class="headerlink" title="安装python库"></a>安装python库</h2><p>在<code>anaconda prompt</code>里面执行以下命令：<br><code>pip install gradio_client</code></p><p>安装执行时所需依赖</p><p>建议先创建python虚拟环境，创建和运行：</p><pre><code>conda create -n xx python ==3.11 #创建python虚拟环境xx,python版本设置为3.11conda activate xx    # 激活python虚拟环境xx</code></pre><h2 id="在anaconda的jupyter实现代码"><a href="#在anaconda的jupyter实现代码" class="headerlink" title="在anaconda的jupyter实现代码"></a>在anaconda的jupyter实现代码</h2><h3 id="导入所用依赖"><a href="#导入所用依赖" class="headerlink" title="导入所用依赖"></a>导入所用依赖</h3><p><code>from gradio_client import Client</code></p><p><code>import json</code></p><h3 id="函数初始化"><a href="#函数初始化" class="headerlink" title="函数初始化"></a>函数初始化</h3><p>定义一个名字为call_internlm_chat7b函数，用来完成模型的调用，模型输入为input_，输出为模型对于输入的输出</p><pre><code class="python">def call_internlm_chat7b(input_):    &quot;&quot;&quot;    input_: 当前输入    return: 当前输出    &quot;&quot;&quot;    client = Client(&quot;https://modelscope.cn/api/vl/studio/AI-ModelScope/Internlm-chat-7b/gradio/&quot;)    result = client.predict(input_,fn_index=0)    with open(result[1],&#39;r&#39;,encoding=&#39;utf-8&#39;) as f:        data = json.load(f)    return data[-1][-1]  # 返回data变量的最后一个元素的最后一个元素</code></pre><h2 id="初步体验"><a href="#初步体验" class="headerlink" title="初步体验"></a>初步体验</h2><p><code>call_internlm_chat7b(&#39;你好&#39;)</code></p><p><img src="/144c4b6/001.png" alt="image-20231006173411953"></p><h1 id="读取本地文件并用chatglm模型访问"><a href="#读取本地文件并用chatglm模型访问" class="headerlink" title="读取本地文件并用chatglm模型访问"></a>读取本地文件并用chatglm模型访问</h1><h2 id="读取本地文件"><a href="#读取本地文件" class="headerlink" title="读取本地文件"></a>读取本地文件</h2><pre><code class="python">import json#从resume.json文件读取信息with open(&#39;resume,json&#39;,&#39;r&#39;,encoding=&#39;utf-8&#39;) as resume_file:    resume = json.load(resume_file)print(&quot;简历信息：&quot;)print(json.dumps(resume, indent=4, ensure_ascii=False))print(resume)</code></pre><p>结果展示：<br><img src="/144c4b6/002.png"></p><p><img src="/144c4b6/003.png" alt="image-20231006174410555"></p><h2 id="调用模型"><a href="#调用模型" class="headerlink" title="调用模型"></a>调用模型</h2><pre><code class="python">output = &#39;&#39;&#39;&#123;&quot;推荐岗位&quot;:&quot;RD还是PM还是UI(三选一)&quot;,&quot;简历得分&quot;:&quot;分数范围0-100&quot;，&quot;得分依据&quot;：&quot;根据简历和岗位要求给出详细的得分依据&quot;&#125;&#39;&#39;&#39;# 将简历和职位要求添加到文本中text = f&#39;请评估用一下简历和岗位匹配度: \n&#123;json.dumps(resume,indent=4,ensure_ascii=False)&#125;\n\n岗位要求:\n&#123;json.dumps(job_requirements,indent=4,ensure_ascii=False)&#125;,输出格式按照&#123;output&#125;给出，输出类型为json’# 调用call_internlm_chat7b函数response = call_internlm_chat7b(text)#打印结果print(response)</code></pre><p>实现效果如下：</p><p><img src="/144c4b6/004.png" alt="image-20231006175650554"></p><p>目前还是有点问题，后续需要继续改进。</p><p>完整代码如下：</p><pre><code class="python">import json# 从resume.json文件中读取简历信息with open(&#39;resume.json&#39;, &#39;r&#39;, encoding=&#39;utf-8&#39;) as resume_file:    resume = json.load(resume_file)# 从job_requirements.json文件中读取职位要求信息with open(&#39;job_requirements.json&#39;, &#39;r&#39;, encoding=&#39;utf-8&#39;) as job_requirements_file:    job_requirements = json.load(job_requirements_file)output = &#39;&#39;&#39;&#123;&quot;推荐岗位&quot;: &quot;RD还是PM还是UI(三选一)&quot;,&quot;简历得分&quot;: &quot;分数范围0-100&quot;,&quot;得分依据&quot;: &quot;根据简历和岗位要求给出详细的得分依据，量化每一部分得分&quot;&#125;&#39;&#39;&#39;# 将简历和职位要求添加到文本中text = f&#39;请评估以下简历和岗位匹配度：\n&#123;json.dumps(resume, indent=4, ensure_ascii=False)&#125;\n\n岗位要求：\n&#123;json.dumps(job_requirements, indent=4, ensure_ascii=False)&#125;\n输出的结果形式如下：\n&#123;output&#125;，输出格式为json格式&#39;# 调用call_internlm_chat7b函数response = call_internlm_chat7b(text)# 打印结果print(response)</code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chatglm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1002</title>
      <link href="//5a29c23b.html"/>
      <url>//5a29c23b.html</url>
      
        <content type="html"><![CDATA[<p>题目：算法题，使用你会的编程语言编程即可）小A和朋友们比身高，一共有 𝒏个朋友，每个朋友的身高是 𝒉，小A的身高为 𝑯，一共有 𝒎阶楼梯，第 𝒊阶楼梯的高度是 𝒔𝒊，第 𝒊个朋友会站在第 𝒑𝒊阶楼梯上，小A想知道，如果小A可以自由选择站在第几阶楼梯上，他最多可以比多少朋友高。 输入描述： 一行三个整数 𝑛，𝑚，𝐻，表示朋友的个数，楼梯的个数，小A的身高。 一行 𝑛个整数 ℎ𝑖，表示每个朋友的身高。 一行 𝑛个整数 𝑝𝑖，表示每个朋友站在第几阶楼梯上。 一行 𝑚个整数 𝑠𝑖，表示每个楼梯的高度。 1 ≤𝑛,𝑚≤10^5 1 ≤ 𝐻,ℎ𝑖,𝑠𝑖≤10^6 1≤𝑝𝑖≤𝑚 输出描述： 输出一个整数，表示小A可以比多少朋友高。<br>[示例]<br>输入：<br>3 4 4<br>3 5 7<br>1 2 2<br>1 2 3 3<br>输出：<br>1<br>说明：小A站在最高的楼梯上，高度为 4 + 3 &#x3D; 7。第一个朋友高度为 3+1&#x3D;4，第二个朋友高度为 5+2&#x3D;7，第三个朋友高度为 7+2 &#x3D;9。<br>小A只能比第一个朋友高 ﻿</p><pre><code>`\# 读取输入n, m, H = map(int, input().split())\# 检查条件if not (1 &lt;= n &lt;= 10**5 and 1 &lt;= m &lt;= 10**5 and 1 &lt;= H &lt;= 10**6):    print(&quot;输入数据不符合条件&quot;)    exit()friend_heights = list(map(int, input().split()))  # 每个朋友的身高ℎ𝑖friend_stairs = list(map(int, input().split()))   # 每个朋友站在的楼梯编号 𝒑𝒊stairs_heights = list(map(int, input().split()))  # 每个楼梯的高度si\# 检查条件if not (all(1 &lt;= hi &lt;= 10**6 for hi in friend_heights) and        all(1 &lt;= si &lt;= m for si in friend_stairs) and        all(1 &lt;= si &lt;= 10**6 for si in stairs_heights)):    print(&quot;输入数据不符合条件&quot;)    exit()\# 计算每个朋友站在不同楼梯上时的身高friend_actual_heights = [friend_heights[i] + stairs_heights[friend_stairs[i] - 1] for i in range(n)]\# 初始化计数器count = 0\# 遍历每个楼梯，计算小A站在不同楼梯上时最多可以比多少个朋友高for i in range(m):    current_height = H + stairs_heights[i]  # 小A站在当前楼梯上的身高    friends_higher = sum(1 for j in range(n) if current_height &gt; friend_actual_heights[j])  # 计算小A站在当前楼梯上能比多少个朋友高    count = max(count, friends_higher)  # 更新最多可以比多少个朋友高\# 输出结果print(count)`</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chatgpt的提示工程</title>
      <link href="//b6557c71.html"/>
      <url>//b6557c71.html</url>
      
        <content type="html"><![CDATA[<h1 id="prompt工程"><a href="#prompt工程" class="headerlink" title="prompt工程"></a>prompt工程</h1><h2 id="什么是-Prompt-工程？"><a href="#什么是-Prompt-工程？" class="headerlink" title="什么是 Prompt 工程？"></a>什么是 Prompt 工程？</h2><p>Prompt 工程是创建提示或指导像 ChatGPT 这样的语言模型输出的过程。它允许用户控制模型的输出并生成符合其特定需求的文本。</p><p>ChatGPT 是一种先进的语言模型，能够生成类似于人类的文本。它建立在 Transformer 架构上，可以处理大量数据并生成高质量的文本。</p><p>然而，为了从 ChatGPT 中获得最佳结果，重要的是要了解如何正确地提示模型。 提示可以让用户控制模型的输出并生成相关、准确和高质量的文本。 在使用 ChatGPT 时，了解它的能力和限制非常重要。</p><p>该模型能够生成类似于人类的文本，但如果没有适当的指导，它可能无法始终产生期望的输出。</p><p>这就是 Prompt 工程的作用，通过提供清晰而具体的指令，您可以引导模型的输出并确保其相关。</p><p><strong>Prompt 公式是提示的特定格式，通常由三个主要元素组成：</strong></p><blockquote><ul><li>任务：对提示要求模型生成的内容进行清晰而简洁的陈述。</li></ul></blockquote><blockquote><ul><li>指令：在生成文本时模型应遵循的指令。</li></ul></blockquote><blockquote><ul><li>角色：模型在生成文本时应扮演的角色。</li></ul></blockquote><h1 id="提示原则"><a href="#提示原则" class="headerlink" title="提示原则"></a>提示原则</h1><p>如何去使用 Prompt，以充分发挥 LLM 的性能？首先我们需要知道设计 Prompt 的原则，它们是每一个</p><p>开发者设计 Prompt 所必须知道的基础概念。设计高效 Prompt 的两个关键原则：<strong>编写清晰、具体的指令</strong>和<strong>给予模型充足思考时间</strong>。掌握这两点，对创建可靠的语言模型交互尤为重要。</p><p>首先，Prompt 需要清晰明确地表达需求，提供充足上下文，使语言模型准确理解我们的意图，就像向一个外星人详细解释人类世界一样。过于简略的 Prompt 往往使模型难以把握所要完成的具体任务。</p><p>其次，让语言模型有充足时间推理也极为关键。就像人类解题一样，匆忙得出的结论多有失误。因此Prompt 应加入逐步推理的要求，给模型留出充分思考时间，这样生成的结果才更准确可靠。</p><p>如果 Prompt 在这两点上都作了优化，语言模型就能够尽可能发挥潜力，完成复杂的推理和生成任务。</p><p>掌握这些 Prompt 设计原则，是开发者取得语言模型应用成功的重要一步。</p><h2 id="原则一-编写清晰、具体的指令"><a href="#原则一-编写清晰、具体的指令" class="headerlink" title="原则一 编写清晰、具体的指令"></a>原则一 编写清晰、具体的指令</h2><h3 id="使用分隔符清晰地表示输入的不同部分"><a href="#使用分隔符清晰地表示输入的不同部分" class="headerlink" title="使用分隔符清晰地表示输入的不同部分"></a>使用分隔符清晰地表示输入的不同部分</h3><p>在编写 Prompt 时，我们可以使用各种标点符号作为“分隔符”，将不同的文本部分区分开来。</p><p>分隔符就像是 Prompt 中的墙，将不同的指令、上下文、输入隔开，避免意外的混淆。你可以选择用</p><p><code>\```，&quot;&quot;&quot;，&lt; &gt;，&lt;tag&gt; &lt;/tag&gt;，: 等做分隔符，只要能明确起到隔断作用即可。</code></p><p>使用分隔符尤其重要的是可以防止 <strong>提示词注入（<strong><strong>Prompt Rejection</strong></strong>）</strong>。什么是提示词注入？就是用户</p><p>输入的文本可能包含与你的预设 Prompt 相冲突的内容，如果不加分隔，这些输入就可能“注入”并操纵语</p><p>言模型，导致模型产生毫无关联的乱七八糟的输出。</p><h3 id="增加背景信息（context）"><a href="#增加背景信息（context）" class="headerlink" title="增加背景信息（context）"></a>增加背景信息（context）</h3><blockquote><p>包含外部信息或者额外的上下文信息，引导语言模型更好的响应。</p></blockquote><p>&#x3D;&#x3D;如：我是一个小学生，你是苏格拉底&#x3D;&#x3D;</p><p><code>tips</code>:角色扮演，给模型一个角色让他按照角色进行输出</p><h2 id="原则二-寻求结构化的输出"><a href="#原则二-寻求结构化的输出" class="headerlink" title="原则二 寻求结构化的输出"></a>原则二 寻求结构化的输出</h2><p>有时候我们需要语言模型给我们一些<strong>结构化的输出</strong>，而不仅仅是连续的文本。</p><p>什么是结构化输出呢？就是按照某种格式组织的内容，例如JSON、HTML等。这种输出非常适合在代码</p><p>中进一步解析和处理。例如，您可以在 Python 中将其读入字典或列表中。</p><p>&#x3D;&#x3D;如：50字，4句话；以json，html格式输出，或者直接给出输出的结构样式，让模型按照该结构输出&#x3D;&#x3D;</p>]]></content>
      
      
      <categories>
          
          <category> 学习资料 </category>
          
          <category> llm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> prompt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文生图</title>
      <link href="//d0da01c.html"/>
      <url>//d0da01c.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、AI-绘画入门"><a href="#一、AI-绘画入门" class="headerlink" title="一、AI 绘画入门"></a>一、AI 绘画入门</h1><h2 id="1、Stable-Diffusion-VS-MidJourney"><a href="#1、Stable-Diffusion-VS-MidJourney" class="headerlink" title="1、Stable Diffusion VS. MidJourney"></a>1、Stable Diffusion VS. MidJourney</h2><p><strong>Midjourney</strong> </p><p>优点:</p><ul><li>操作简单、出图绚丽多彩</li></ul><p>缺点:</p><ul><li><p>订阅付费充钱</p></li><li><p>内容有限制，比如说不能出现暴力和颜色的内容</p></li><li><p>出图还是带有很大的随机性</p></li></ul><p><strong>Stable Diffusion</strong> </p><p>特点:</p><ul><li><p>第一、Stable Diffusion开源</p></li><li><p>第二、可以在本地部署</p></li><li><p>第三、可以安装各种插件，安装插件顾名思义就是如虎添翼</p></li><li><p>第四、内容无限制</p></li></ul><h2 id="2、Stable-Diffusion-介绍"><a href="#2、Stable-Diffusion-介绍" class="headerlink" title="2、Stable Diffusion 介绍"></a>2、Stable Diffusion 介绍</h2><p>目前，随着AI技术的快速迭代，各种基于AIGC（人工智能内容生成）技术的产品不断涌向社会，而其中最普遍的，则莫过于大量的AI绘图模型，如Midjourney、Dreambooth、Novel AI和Stable Diffusion等。</p><p>虽然AI绘图领域，看似进入了百花齐放的时代，但目前业内的顶流，仍然是Midjourney和Stable Diffusion为代表两大龙头。</p><p><strong>Stable Diffusion 维基百科</strong></p><p><a href="https://zh.wikipedia.org/zh-hans/Stable_Diffusion">https://zh.wikipedia.org/zh-hans/Stable_Diffusion</a></p><h2 id="3、Stable-Diffusion-环境搭建"><a href="#3、Stable-Diffusion-环境搭建" class="headerlink" title="3、Stable Diffusion 环境搭建"></a>3、Stable Diffusion 环境搭建</h2><ul><li><p><strong>参考 Github 项目：stable-diffusion-webui</strong></p></li><li><p><strong>启动命令：</strong></p></li></ul><pre><code class="shell">$ ./webui.sh --precision full --no-half</code></pre><ul><li><strong>汉化：</strong></li></ul><p>通过安装语言包和配置扩展实现。</p><ul><li><strong>模型下载网站：</strong></li></ul><p><a href="https://civitai.com/">https://civitai.com/</a></p><p><a href="https://huggingface.co/">https://huggingface.co</a></p><h2 id="4、文生图与图生图"><a href="#4、文生图与图生图" class="headerlink" title="4、文生图与图生图"></a>4、文生图与图生图</h2><p>文生图 （Text to Image）</p><ul><li>需要提示词，画面控制主要靠提示词</li></ul><p>图生图（Image to Image）</p><ul><li>需要提示词，图片辅助提示词进行画面控制</li></ul><h1 id="二、文生图入门与提示词基础"><a href="#二、文生图入门与提示词基础" class="headerlink" title="二、文生图入门与提示词基础"></a>二、文生图入门与提示词基础</h1><p>AI绘画和魔法、念咒有什么关系？记得吗，作图过程中，有一个必不可少的环节，就是向AI输入用于描述画面的Prompt，在AI聊天里我们也用。因为大部分AI绘制作品的提示词是用英文写的，很长，很乱。而且穿插着各种奇怪的数字、符号，就像高深莫测的咒语一样。因此，大家形象的把这个书写提示词的过程称为“念咒”。而我们，就像那些魔法师一样，要通过吟唱咒语，来变出我们想要的结果。虽说AI是人工智能，但它和真正意义上的人类智慧还是有一定差距的，很多时候它并不知道你想要的是什么。因此，就需要详尽的提示词来帮助你更好地指挥AI作图。这也是为什么，“念咒”这件事，在AI绘画盛行的今天，已经慢慢形成了一门独特的可以去探讨、研究的学问。</p><p>本课程讲解的内容使用的是Stable Diffusion，但我知道有很多朋友用的是另一款非常流行的AI绘画应用MidJourney，这些框架的大逻辑框架其实是通用的，而 MidJourney 比SD要更依赖好的提示词来做出作品，在提示词的应用层面更具深度。</p><h2 id="1、提示词基本概念"><a href="#1、提示词基本概念" class="headerlink" title="1、提示词基本概念"></a>1、提示词基本概念</h2><blockquote><p>内容概要：</p><ul><li>提示词的概念和基本逻辑</li><li>提示词的语法（输入、间隔）</li><li>内容型提示词与标准化提示词</li></ul></blockquote><p>这节课，我们来接触StableDiffusion中的文生图功能，也就是经由文本生成图像，这里面的“文”，指的自然就是提示词Prompt了。广义的解释，Prompt是指用户输入的文本或者图像信息，目的是指导模型根据一些特定的需求生成艺术作品。直白一点说，它是我们用来告诉AI“我要画什么”，“画成什么样”的一种语言。</p><p>上节课里，我们也提过了，SD里进行绘制的两种基本方式，文生图和图生图，文生图就是主要以文字来实现这个沟通过程的，而图生图还可以依赖图片来传达信息，但图生图里也有提示词，而且同样重要。提示词包括的内容，也是非常广泛的，它可能包括作品主题、画风、形象特点以及一些具体包含的要素。</p><p>比如以下例子：</p><pre><code>正面提示词：(1girl:2.0), solo, nilou \(genshin impact\), solo, long hair, jewelry, blue gemstone, earrings, horns, crown, cyan satin strapless dress, white veil, neck ring, red hair, &#123;green eyes&#125;, ((full body)), (SFW:1.5), front, highly detailed face, curvy body, skindentation, hands up, happy smily face, pureerosface_v1, hiqcgbody,&#123;&#123;masterpiece&#125;&#125;, &#123;best quality&#125;,&#123;highresl&#125;, original, reflection,Exaggerated body proportions, greasy skin, realistic and delicate facial features, depth of field, extremely detailed CG unity 8k wallpaper, bloom, shine, (illustration), (painting), (sketch), anime coloring, fantasy, unreal engine, body shadow, artstationindoor, sitting on sofa, sunset, backlighting, shiny skin, lens flare, light particles, glowing, dappled sunlight, extreme shadow and light, long shadow, light rays, sunwind blow, maple leaf, cloudy sky, dusty, forest, plant, flower反面提示词：EasyNegative, (worst quality:2), (low quality:2), (normal quality:2), lowres, normal quality, ((monochrome)),((grayscale)),skin spots, acnes, skin blemishes, age spot, (outdoor:1.6), (ugly:1.331), (duplicate:1.331), (morbid:1.21), (mutilated:1.21)(tranny:1.331), mutated hands, (poorly drawn hands:1.5), blurry, (bad anatomy:1.21), (bad proportions:1.331), extra limbs, (disfigured:1.33), (more than 2 nipples:1.331), (missing arms:1.33), (extra legs:1.331), (fused fingers:1.61051),(too many fingers:1.61051), (unclear eyes:1.331), lowers, bad hands, missing fingers, extra digit, (futa:1.1), bad hands, missing fingers, (((extra arms and legs))), extra hair, (2girls:2.0), signature, watermark, username, atist name</code></pre><p><img src="/d0da01c/001.png" alt="00000-446021579"></p><p><img src="/d0da01c/002.png" alt="00003-2149389212"></p><p>不同的提示词分别向AI描绘了画面风格、人物体貌、服饰特点、场景内容和一些额外的修饰性元素。别看这么多的字，其实，很多关于风格和画质把控的提示词是固定的。</p><p>虽然说提示词并非越多越好，但很多时候写多点，比少写点出来的效果肯定要更好，且在特定需求上控制会更为精确。所以，要想让AI按照我们的需要去产图，提示词到底该怎么写呢？放轻松，其实写提示词的过程非常自由的，无论你写什么，AI都可以给你画，在StableDiffusion中，可以输入提示词的区域就是左上方这两个文本框了，之前也提到了，它被分为了上下两部分，上面是正向的提示词，下面是反向的提示词。虽然自由，但提示词有一些基本的语法规则，是你应该掌握的。</p><p>首先，提示词需要英文书写，所以，如果你英语水平足够好，可以用英语组织你的描述语言，如果不好，可以求助翻译软件。</p><p>其次，提示词是以词组作为单位的，它不需要像真的英语句子一样，有完整的语法结构主从句之类的东西。就像你如果跟AI说：“画一个又长又宽的面和一个又大又圆的碗”，那直接可以分解成(面, 长, 宽), (碗, 大, 圆)，这样AI也能听懂，甚至有时候听的比前一种更懂。</p><p>词组与词组之间，需要插入分隔符，基本的分隔符形式是一个英文里的半角逗号。再输入提示词的时候，最好把输入法切换到英文。因为里面涉及的符号基本都是英文的，提示词可以换行，但每一行的行末最好也打上分隔符。</p><pre><code>1girl, walking, forest, path, sun, sunshine</code></pre><pre><code>1girl, walking, forest, path, sun, sunshine,shining on body,</code></pre><p>在输入这些东西以后，点击“Generate”，生成图画，出来的图片是这样的：</p><p><img src="/d0da01c/003.png" alt="00006-1663017696"></p><p>它有可能符合你的需要，也有可能变得奇奇怪怪。AI绘画是具有一定的随机性的，点多几次生成，每次生成出来的东西都会不太一样。之前，也有人把AI绘画比喻为“抽卡”，想出好的图片，得靠运气来抽。“一个女孩在林中漫步”，这其实只是一个非常概括的描述，这个女孩长什么样子、森林里有什么东西，时间是早上还是晚上、天气如何，这些东西，AI都不知道，你的提示词太过于笼统，那它就只能瞎蒙抽卡了。但也别担心，提示词很多时候不是一下子就写好的，而是现有一个雏形，再慢慢细化、补充和微调的。</p><pre><code>1girl, walking, forest, path, sun, sunshine, shining on body, looking at viewer, close-up, upper body,(masterpiece:1,2), best quality, masterpiece, highres, original, extremely detailed wallpaper, perfect lighting, (extremely detailed CG:1.2), drawing, paintbrush</code></pre><p>还可以加一些的提示词，更多的就是在一些具体的方面，对这个画面去做控制。</p><p><img src="/d0da01c/004.png" alt="00007-2658747475"></p><h2 id="2、提示词分类和书写方式"><a href="#2、提示词分类和书写方式" class="headerlink" title="2、提示词分类和书写方式"></a>2、提示词分类和书写方式</h2><p>要加些什么呢？提示词有很多不同的分类。这里，把提示词概括成如下几个大类。</p><h3 id="1-人物及主题特征"><a href="#1-人物及主题特征" class="headerlink" title="(1) 人物及主题特征"></a>(1) 人物及主题特征</h3><ul><li>服饰穿搭：white dress</li><li>发型发色：blonde hair，long hair</li><li>五官特点：small eyes，big mouse</li><li>面部表情：smiling</li><li>肢体动作：stretching arms</li></ul><p>比如：女孩，白色连衣裙，金发，长发，微笑，伸展手臂，举手，美丽的，快乐的</p><pre><code>1girl, walking, forest, path, sun, sunshine, shining on body, white dress, blonde hair, long hair, smiling, stretching arms, hands up, beautiful, happy,</code></pre><p><img src="/d0da01c/005.png" alt="00000-1611124299"></p><h3 id="2-场景特征"><a href="#2-场景特征" class="headerlink" title="(2) 场景特征"></a>(2) 场景特征</h3><ul><li>室内、室外：indoor&#x2F;outdoor</li><li>大场景：forest, city, street</li><li>小细节：tree, bush, white flower</li></ul><p>比如：树木，灌木，白色的花，（林间）小路</p><pre><code>1girl, walking, forest, path, sun, sunshine, shining on body, white dress, blonde hair, long hair, smiling, stretching arms, hands up, beautiful, happy,trees, bush, white flower, outdoor,</code></pre><h3 id="3-环境光照"><a href="#3-环境光照" class="headerlink" title="(3) 环境光照"></a>(3) 环境光照</h3><ul><li>白天、黑夜：day &#x2F; night</li><li>特定时段：morning, sunset</li><li>光环境：sunlight,  bright,  dark</li><li>天空：blue sky,  starry sky</li></ul><p>比如：白天、阳光、蓝天、多云的天空</p><pre><code>1girl, walking, forest, path, sun, sunshine, shining on body, white dress, blonde hair, long hair, smiling, stretching arms, hands up, beautiful, happy,trees, bush, white flower, path, outdoor,day, sunlight, blue sky, cloudy sky,</code></pre><h3 id="4-补充：画幅视角"><a href="#4-补充：画幅视角" class="headerlink" title="(4) 补充：画幅视角"></a>(4) 补充：画幅视角</h3><ul><li>距离：close-up(特写)，distant</li><li>人物比例：full body, upper body</li><li>观察视角：from above, view of back</li><li>镜头类型：wide angle, Sony A7</li></ul><p>比如特写：</p><pre><code>1girl, walking, forest, path, sun, sunshine, shining on body, white dress, blonde hair, long hair, smiling, stretching arms, hands up, beautiful, happy,trees, bush, white flower, path, outdoor,day, sunlight, blue sky, cloudy sky, close-up</code></pre><p>可以把这四个分类叫做“内容型提示词”，然而，只有内容型的提示词，你画出的东西很大概率不会让你满意，这里，我们需要引入其他的提示词，来给这个画面打一剂强心针。</p><p>首先是画质，因为在AI学习的图片里，有些是高清的，有些质量比较模糊，我们可以用这样的提示词，让他盯着哪些高清的去看。</p><h3 id="5-画质提示词"><a href="#5-画质提示词" class="headerlink" title="(5) 画质提示词"></a>(5) 画质提示词</h3><ul><li>通用高画质：best quality, ultra-detailed, masterpiece, hires, 8k</li><li>特定高分辨率类型：extremely detailed CG unity 8k wallpaper(超精细的8K Unity游戏CG), unreal engine rendered(虚幻引擎渲染)</li></ul><p>比如：最高的质量，超级细节，杰作，高分辨率，8K(分辨率)，超细节的Unity CG壁纸</p><pre><code>1girl, walking, forest, path, sun, sunshine, shining on body, white dress, blonde hair, long hair, smiling, stretching arms, hands up, beautiful, happy,trees, bush, white flower, path, outdoor,day, sunlight, blue sky, cloudy sky, close-up,best quality, ultra-detailed, masterpiece, hires, 8k,extremely detailed CG unity 8k wallpaper, unreal engine rendered</code></pre><h3 id="6-画风提示词"><a href="#6-画风提示词" class="headerlink" title="(6) 画风提示词"></a>(6) 画风提示词</h3><ul><li>插画风：illustration, painting, praintbrush</li><li>二次元：anime, comic, game CG</li><li>写实系：photorealistic, realistic, photograph</li></ul><p>比如：绘画，插画，动画，游戏CG</p><pre><code>1girl, walking, forest, path, sun, sunshine, shining on body, white dress, blonde hair, long hair, smiling, stretching arms, hands up, beautiful, happy,trees, bush, white flower, path, outdoor,day, sunlight, blue sky, cloudy sky, close-up,best quality, ultra-detailed, masterpiece, hires, 8k,extremely detailed CG unity 8k wallpaper, unreal engine renderedpainting, illustration, anime, game CG</code></pre><p>（5）、（6）可以称为标准化的提示词。</p><h3 id="7-提示词模板"><a href="#7-提示词模板" class="headerlink" title="(7) 提示词模板"></a>(7) 提示词模板</h3><pre><code>描述人物:(1girl:2.0), solo, nilou \(genshin impact\), solo, long hair, jewelry, blue gemstone, earrings,horns, crown, cyan satin strapless dress, white veil, neck ring, red hair, &#123;green eyes&#125;,描述场景:indoor, room, house, sofa, wooden floor, plant, flowers, trees, windows,描述环境(时间、光照):day, morning, sunlight, dappled sunlight, backlight, light rays, cloudy sky描述画幅视角:full body, wide angle shot, depth of field其他画面要素:light particles, fantasy, wind blow, maple leaf, dusty,... (其他往后增加)高品质标准化:&#123;&#123;masterpiece&#125;&#125;, &#123;best quality&#125;, &#123;highres&#125;, original, reflection, unreal engine, body shadow, artstationextremely detailed CG unity 8k wallpaper画风标准化:(illustration), (painting), (sketch), anime coloring, fantasy,其他特殊要求:exaggerated body proportions, greasy skin, realistic and delicate facial features, SFW</code></pre><h2 id="3、权重与负面提示词"><a href="#3、权重与负面提示词" class="headerlink" title="3、权重与负面提示词"></a>3、权重与负面提示词</h2><h3 id="1-提示词的权重"><a href="#1-提示词的权重" class="headerlink" title="(1) 提示词的权重"></a>(1) 提示词的权重</h3><p>如下咒语，</p><pre><code>SFW, 1girl, walking, forest, path, sun, sunshine, shining on body,yellow skirt and white t-shirt, blonde hair, long hair, smiling, stretching arms, hands up, beautiful, happy.trees, bush, white flower, path, outdoor,(masterpiece:1.2) , best quality, masterpiece, highres, original, extremely detailed wallpaper, perfect lighting(extremely detailed CG:1.2), drawing, paintbrush.</code></pre><p>你会看到很多(),小数点，逗号之类的符号和数字，他们又是做什么的呢？其实，这些内容是用来增强或者是减弱某些提示词的优先级和权重的，比如刚才我们看到这个画面，我们输入了 <code>white flower</code>, 但我们在图片上并没有清晰的看到白色的花，你输入了很多不同的元素给AI，都要他画，但他在处理的时候，不一定get到你最想要的是什么，所以有可能优先花了树和森林，如果你就是特别特别想要百花，那就可以用类似的方式，把白花的权重和优先级增强，去增强的方式有两种：</p><ul><li><p>套括号</p><p><code>()</code> 会使权重变为 1.1 倍，相对于其他元素就更突出。你还可以套多层括号，每套一层，就再乘以1.1倍，三层就是1.331倍。这样花就出来了：</p><pre><code>SFW, 1girl, walking, forest, path, sun, sunshine, shining on body,yellow skirt and white t-shirt, blonde hair, long hair, smiling, stretching arms, hands up, beautiful, happy.trees, bush, (((white flower))), path, outdoor,(masterpiece:1,2) , best quality, masterpiece, highres, original, extremely detailed wallpaper, perfect lighting(extremely detailed CG:1.2), drawing, paintbrush.</code></pre></li><li><p>括号加数字权重</p><p>加了一种括号以后，可以在后面加一个英文冒号，后面可以接一个数字。</p><pre><code>SFW, 1girl, walking, forest, path, sun, sunshine, shining on body,yellow skirt and white t-shirt, blonde hair, long hair, smiling, stretching arms, hands up, beautiful, happy.trees, bush, (white flower: 1.5), path, outdoor,(masterpiece:1,2) , best quality, masterpiece, highres, original, extremely detailed wallpaper, perfect lighting(extremely detailed CG:1.2), drawing, paintbrush.</code></pre><p>所以，当你觉得这个画面里有你告诉了AI但他又没有画出来的东西时，就可以借助这些方法来强调。加数字的方式明显更准确，而加括号进行微调的时候就更方便。</p><p>比起圆括号，还有这种大括号 <code>&#123;&#125;</code>, 代表1.05倍，调节的效果就细微一点。</p></li><li><p>削弱提示词</p></li></ul><p> 而如果你想削弱某个提示词的影响，就可以赋予它一个小于 1 的权重数值，或者用方括号<code>[]</code>, 会把原来的权重削弱成原来的 0.9 倍。调节权重的时候，也要注意一件事情，就是尽量避免个别词条的权重太高，我体验的安全范围在 1 上下 0.5 左右。当你赋予一个词条2左右甚至更高的数值时，他就容易扭曲画面的内容。这个时候我们通常要改换思路。通过更多类型的词条来协助增强它的效应。</p><p><strong>总结一下：</strong></p><p><img src="/d0da01c/006.png" alt="image-20230801063233335"></p><ul><li>进阶语法</li></ul><p><img src="/d0da01c/007.png" alt="image-20230801063519417"></p><h3 id="2-负面提示词"><a href="#2-负面提示词" class="headerlink" title="(2) 负面提示词"></a>(2) 负面提示词</h3><p>提示词另外一个构成部分，是负面提示词。通俗点说，你希望这个画面里出现什么，就往正向提示词里丢，而不希望出现什么，就往反向提示词里丢。反向提示词是可以没有的，但一般我们也会选择加入一些通用的项目，主要也是基于标准化的考虑，比如：</p><pre><code>NSFW, (worst quality:2) , (low quality:2), (normal quality:2) , lowres, normal quality, ((monochrome)), ((grayscale)), skin spots, acnes, skin blemishes, age spot, (ugly:1.331), (duplicate:1.331), (morbid:1.21), (mutilated:1.21), (tranny:1.331), mutated hands, (poorly drawn hands:1.5), blurry, (bad anatomy:1.21), (bad proportions:1.331), extra limbs, (disfigured:1.331), (missing arms:1.331), (extra legs:1.331), (fused fingers:1.61051), (too many fingers:1.61051), (unclear eyes:1.331), lowers, bad hands, missing fingers, (((extra arms and legs))),</code></pre><h3 id="3-出图参数详解"><a href="#3-出图参数详解" class="headerlink" title="(3) 出图参数详解"></a>(3) 出图参数详解</h3><p>如果说提示词是咒语，那出图参数就像是魔法师的魔杖和魔导书一样，空着了这个咒语的具体释放形式。</p><ul><li><p><strong>采样迭代步数</strong></p><p>AI 生成图像会经过一个加噪再去噪的过程，而去噪就是在用像素一点点模拟你的最终要生成的这个图像，每模拟一次，画面就会变得更清晰一点。理论上，采样迭代步数越多，肯定最终效果越清晰，但实际上，当步数大于20步以后，后面的提升不大。而增加步数肯定意味着更长的计算时间。所以，默认的采样步数一般都是 20。你算力充足，且想追求更高的清晰度，就设置为 30-40，最低不要低于 10。</p></li><li><p><strong>采样方法</strong></p><p>采样方法，其实可以简单解释成AI进行图像生成的时候使用的某种特定算法，WebUI提供的采样方法非常多，足足十几个，但其中我们常用到的估计也就4-5个。这其中：</p><p>Euler 的两个合适插画风格，出图比较朴素。</p><p>DPM 2 和 DPM2 Karras 速度较快。</p><p>再具体使用时，我推荐使用带有 <code>++</code> 号的，这些都是改进了的算法，无论如何都比上面的更稳定。</p><p>另外，大部分模型也有推荐使用某种特定的算法，这可能是模型制作者自己测试过的。比如深渊橘的作者最推荐用的就是SDE Karras。</p></li><li><p><strong>宽度和高度</strong></p><p>代表的就是你最终出图的时候的分辨率，分辨率的设置存在一些隐性限制，默认的分辨率是 512 x 512，但这个分辨率下的图片，哪怕细节再丰富，看起来都是模糊的。设备允许的情况下，我会把他提到 1000 左右。</p><p>相同的提示词，用更高的分辨率跑出来，质感就完全不一样了。但是，分辨率设置的太高，也是会有问题的，一是你的显卡显存扛不住；其二，则是分辨率太大了，很容易出现多人、多手、多脚的情况。这个问题我有特殊研究过，它的原因是，AI在进行模拟训练的时候，用的图片的分辨率一般都比较小，如果你的分辨率设置太大，它就会认为你是多张图片拼接而成的，那出现多的人就不奇怪了。</p><p>要避免这样的问题出现，一般我们先采用低分辨率绘制，再靠<strong>高清修复(Hires Fix)</strong> 来放大。它本身其实是额外的做了一次图生图。你也可以反复实验，了解在你当前的设备条件下，什么分辨率是既能保证质量又能兼顾效率的。</p></li><li><p>面部修复</p><p>面部修复一般都要勾选上，它会采用一些对抗算法识别人物面部并进行修复，和我们用的美图App里面智能P脸的功能差不多。</p></li><li><p>平铺&#x2F;分块(Tiling)</p><p>平铺，是用来生成那种可以无缝贴满整个屏幕的纹理性图片的。如果你没有需要，千万别勾，也是一个让你的画面变的很奇怪的东西。</p></li><li><p>提示词相关性（CFG Scale）</p><p>提示词相关性好理解，它的值越高，AI忠实地反映你的提示词的程度就越高，但和权重一样，我们一般不会浮动太多，7-12 是比较安全的数值，太高容易边型。</p></li><li><p>随机种子</p><p>随机种子也是一个可以用来控制画面内容一致性的重要参数。</p></li><li><p>生成批次</p><p>因为AI绘画的不确定性，即便是同一组提示词，你也需要反复试验，期待它在某个瞬间给你一个完美符合你需要的画面，这个时间过程有时会很漫长，可能会经过几十次、上百次。如果你想让AI一直不断地按照同一组提示词和参数去出图，那就把批次数调高，绘制的过程会不断重复进行。</p><p>结束以后，它会生成两样东西——除了每个批次出的图，还会有一张拼在一起的格子预览图，方便你进行对比。所以，你完全可以让它一口气来上个10次20次甚至几百次</p></li><li><p>每批数量</p><p>这个不建议调整，增大可以让你每批次数绘制的图像数量增多。理论上效率会更高，但它同一批绘制的方法是把他们拼接在一起看作一张更大的图片一次去画，所以你的设备不好，非常容易爆显存。</p></li></ul><h2 id="4、提示词到底怎么写？"><a href="#4、提示词到底怎么写？" class="headerlink" title="4、提示词到底怎么写？"></a>4、提示词到底怎么写？</h2><p>对于新手，我给大家总结三个快速写提示词的方法：</p><h3 id="1-翻译大法"><a href="#1-翻译大法" class="headerlink" title="(1) 翻译大法"></a>(1) 翻译大法</h3><p>其实，无论这些提示词再怎么复杂，它们说的还都是人话。因此，当你不不知道该如何表述的时候，就用自然的语言把你想要画的东西一件件地说出来就好了。还是那句话，SD 不认中文，所以你得先用翻译平台把它转成英文。虽然这些词语表述有时候不绝对准确，但它至少是在帮你接近那个你想要的画面。而有一些功能插件也会帮助你把不准确的意象校正成AI的词典里有的东西，也蛮实用的。目前，也有一些开发者做出了很多提示词的插件，大家可以去探索。</p><h3 id="2-借助工具"><a href="#2-借助工具" class="headerlink" title="(2) 借助工具"></a>(2) 借助工具</h3><p>AI 绘画也流行了一段时间了，能意识到提示词难写的人，肯定也不止你我而已。因此，有些人专门开发了一些可以帮助你更好地去书写提示词的工具。</p><p>这里，我推荐两个可以用于辅助书写提示词的网站：</p><p><a href="http://atoolbox.net/">http://atoolbox.net</a></p><p><a href="https://ai.dawnmark.cn/">https://ai.dawnmark.cn</a></p><p>他们的用法都很简单，你可以像选参数一样，勾选那些你需要的，它会帮助你自动按照刚刚我们说的那些语法规则整理到一起。然后你再复制粘贴到自己的SD里面就可以。使用这些工具，像是在经历一个更方便的翻译的过程。但要注意，思路不要被他已有的一些词汇限制住了。如果有其他你想要加进去的东西，也可以尝试自己撰写添加。</p><h3 id="3-抄作业"><a href="#3-抄作业" class="headerlink" title="(3) 抄作业"></a>(3) 抄作业</h3><p>在AI绘画领域，抄作业并不是什么不光彩的事，有很多创作者还会主动分享自己作图使用的咒语和模型。</p><p><a href="https://civitai.com/">https://civitai.com/</a></p><p><a href="https://openart.ai/">https://openart.ai</a></p><p><a href="https://arthub.ai/">https://arthub.ai</a></p><h1 id="三、图生图"><a href="#三、图生图" class="headerlink" title="三、图生图"></a>三、图生图</h1><blockquote><p>内容概要：</p><p>1、图生图原理</p><p>2、图生图基本流程</p><p>3、随机种子作用解析</p></blockquote><h2 id="1、图生图原理"><a href="#1、图生图原理" class="headerlink" title="1、图生图原理"></a>1、图生图原理</h2><p>图生图可以帮你把一张图片画成另一种模样。在文生图中我们看到，AI文生图是有一定的随机性的，画出来的东西不一定完全满足我们的需求。在现实生活里，这种对需求的传递偏差与错误解读其实也普遍存在。比如天天干架的产品经理和程序员、甲方客户与设计师。我们和AI之间的交流，可以把一张图片给他作为参考，来生成一张新的图片。</p><h2 id="2、图生图的三个关键步骤"><a href="#2、图生图的三个关键步骤" class="headerlink" title="2、图生图的三个关键步骤"></a>2、图生图的三个关键步骤</h2><ul><li>第一步：导入图片</li><li>第二步：书写提示词</li><li>第三步：参数调整</li></ul><h2 id="3、参数技术性解析"><a href="#3、参数技术性解析" class="headerlink" title="3、参数技术性解析"></a>3、参数技术性解析</h2><p>直接参考文生图的提示题。</p><p><strong>正向提示词：</strong></p><pre><code>(masterpiece:1,2), best quality, masterpiece, highres, original, extremely detailed wallpaper, pertect lighting, (extremel detailed CG:1.2), drawing, paintbrush,</code></pre><p><strong>反向提示词：</strong></p><pre><code>NSFW, (worst quality:2) , (low quality:2), (normal quality:2) , lowres, normal quality, ((monochrome)), ((grayscale)), skin spots, acnes, skin blemishes, age spot, (ugly:1.331), (duplicate:1.331), (morbid:1.21), (mutilated:1.21), (tranny:1.331), mutated hands, (poorly drawn hands:1.5), blurry, (bad anatomy:1.21), (bad proportions:1.331), extra limbs, (disfigured:1.331), (missing arms:1.331), (extra legs:1.331), (fused fingers:1.61051), (too many fingers:1.61051), (unclear eyes:1.331), lowers, bad hands, missing fingers, (((extra arms and legs))),</code></pre><p><strong>参数设置：</strong></p><ul><li><p>重绘幅度</p><p>表示绘制的图和原图相差的比重。</p></li><li><p>分辨率</p><p>最好和图片比例相同，不然会边型。</p></li></ul><h2 id="4、随机种子的含义研究"><a href="#4、随机种子的含义研究" class="headerlink" title="4、随机种子的含义研究"></a>4、随机种子的含义研究</h2><p>AI生成画面是随机的，但它的每一次生成都有自己的一套描绘方式，而这个描绘方式，就会被记录成一组随机数，这个东西，我们就把它叫做一个随机种子。</p><p>不同的随机种子，出来的效果当然是随机性强的，但如果你使用的是同一个随机种子，那生成的图像里就必然会存在很多的相似之处，因为它是用同一套方法随机出来的。</p><p>从它的视角看，你说AI绘画是抽卡其实基本是正确的，因为你每生成一次，就会得到一个随机种子。有的种子效果好，有的种子效果差。</p><p>在随机种子设置里，有两个功能按钮，点那个骰子，可以把随机参数设置成 -1，就是每次都抽一张新的卡。点那个循环按钮，就会把种子设置成你的上一张卡抽出来的那个数。</p><p>打开图库浏览器，找到我们之前生成的一些图片，</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo学习日记</title>
      <link href="//52e7e92.html"/>
      <url>//52e7e92.html</url>
      
        <content type="html"><![CDATA[<h1 id="部署hexo博客"><a href="#部署hexo博客" class="headerlink" title="部署hexo博客"></a>部署hexo博客</h1><p>首先需要安装<code>hexo-deployer-git</code>插件，这样我们才能把生成的<code>public</code>文件夹部署到Github或者其他代码托管平台。</p><pre><code class="bash">npm install hexo-deployer-git --save</code></pre><p>下面你需要打开根目录，然后在这个目录下找到站点配置文件<code>_config.yml</code>（如下图左）。并且打开这个文件，进行编辑。</p><p><img src="/52e7e92/image-1.png" alt="2"></p><p>在站点配置文件内（如上图右）找到&#x3D;&#x3D;deploy&#x3D;&#x3D;这一行代码，按照以下的格式修改即可。</p><pre><code class="bash">deploy:  type: git  repo: git@github.com:damon-ldl/damon-ldl.github.io.git   branch: master</code></pre><ul><li><p>deploy: 部署的意思，一个关键词</p></li><li><p>type：部署的类型，这里选择的是git，就是上面我们已经安装的那个</p></li><li><p>repo：仓库的意思，我们所有的本地文件都要上传到这里！我们要在github上面申请自己的账号，建造自己的仓库~（具体怎么做见后文！）</p></li><li><p>branch：仓库的分支的意思，一个仓库里面可以有多个分支，就像是一个大院里面有很多间厢房一样。具体的含义后面解释。</p></li></ul><h1 id="hexo相关命令"><a href="#hexo相关命令" class="headerlink" title="hexo相关命令"></a>hexo相关命令</h1><h4 id="hexo-init"><a href="#hexo-init" class="headerlink" title="hexo init"></a>hexo init</h4><pre><code>$ hexo init </code></pre><p>命令用于初始化一个本地文件夹为网站的根目录</p><h4 id="hexo-new"><a href="#hexo-new" class="headerlink" title="hexo new"></a>hexo new</h4><pre><code>$ hexo new title 新建一篇文章</code></pre><h4 id="hexo-generate"><a href="#hexo-generate" class="headerlink" title="hexo generate"></a>hexo generate</h4><pre><code>$ hexo generate 可以简写成 hexo g该命令用于生成静态文件</code></pre><h4 id="hexo-server"><a href="#hexo-server" class="headerlink" title="hexo server"></a>hexo server</h4><pre><code>$ hexo server 命令用于启动本地服务器，一般可以简写成 hexo s可以加一些参数-p    选项，指定服务器端口，默认为 4000-i    选项，指定服务器 IP 地址，默认为 0.0.0.0-s    选项，静态模式 ，仅提供 public 文件夹中的文件并禁用文件监视</code></pre><h4 id="hexo-deploy"><a href="#hexo-deploy" class="headerlink" title="hexo deploy"></a>hexo deploy</h4><pre><code>$ hexo deploy 命令用于部署网站，一般可以简写成 hexo d</code></pre><h4 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h4><pre><code>$ hexo clean 命令用于清理缓存文件，是一个比较常用的命令</code></pre><h4 id="hexo-–safe"><a href="#hexo-–safe" class="headerlink" title="hexo –safe"></a>hexo –safe</h4><pre><code>$ hexo --safe 表示安全模式，用于禁用加载插件和脚本</code></pre><h4 id="hexo-–debug"><a href="#hexo-–debug" class="headerlink" title="hexo –debug"></a>hexo –debug</h4><pre><code>$ hexo --debug 表示调试模式，用于将消息详细记录到终端和 debug.log 文件</code></pre><h4 id="hexo-–silent"><a href="#hexo-–silent" class="headerlink" title="hexo –silent"></a>hexo –silent</h4><pre><code>$ hexo --silent  表示静默模式，用于静默输出到终端</code></pre><h1 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h1><pre><code>npx hexo cl &amp;&amp;npx hexo g &amp;&amp;npx hexo s</code></pre><ul><li><code>hexo cl</code> 是 <code>hexo clean</code>的简写。意思是清除本地的缓存，实际上就是把博客文件夹下的<code>public</code>文件夹删除掉了。这个<code>public</code>是基于本地的文件生成的、用于上传到仓库或者其他网站服务器上的文件夹，可以理解为本地文件上网的中转站、交通工具，删掉了也不影响本地的内容。</li><li><code>hexo g</code> 是<code>hexo generate</code>的简写，意思是生成public文件夹。</li><li>hexo s 命令用于启动本地服务器</li></ul><pre><code>npx hexo d</code></pre><ul><li><code>hexo d</code>是<code>hexo deploy</code>的简写，意思是将生成的public文件夹部署到网上，我们这里是部署到github上面。</li></ul><h1 id="部署常见错误"><a href="#部署常见错误" class="headerlink" title="部署常见错误"></a>部署常见错误</h1><h2 id="文章标签页设置"><a href="#文章标签页设置" class="headerlink" title="文章标签页设置"></a>文章标签页设置</h2><hr><pre><code>title: 【必需】文章标题date: 【必需】文章创建日期updated: 【可选】文章更新日期tags: 【可选】文章标签categories: 【可选】文章分类keywords: 【可选】文章关键字description: 【可选】文章描述top_img: 【可选】文章顶部图片comments： 【可选】显示文章评论模块 (默认 true)cover: 【可选】文章缩略图 (如果没有设置 top_img, 文章页顶部将显示缩略图，可设为 false / 图片地址 / 留空)toc: 【可选】显示文章 TOC (默认为设置中 toc 的 enable 配置)toc_number: 【可选】显示 toc_number (默认为设置中 toc 的 number 配置)auto_open: 【可选】是否自动打开 TOC (默认为设置中 toc 的 auto_open 配置)copyright: 【可选】显示文章版权模块 (默认为设置中 post_copyright 的 enable 配置)copyright_author: 【可选】文章版权模块的文章作者copyright_author_href: 【可选】文章版权模块的文章作者链接copyright_url: 【可选】文章版权模块的文章连结链接copyright_info: 【可选】文章版权模块的版权声明文字mathjax: 【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)katex: 【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)aplayer: 【可选】在需要的页面加载 aplayer 的 js 和 css, 请参考文章下面的音乐 配置highlight_shrink：【可选】配置代码框是否展开 (true/false)(默认为设置中 highlight_shrink 的配置)</code></pre><p>文章标签页设计中一定要注意“：”后面需要<code>空格</code>！！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown学习日志</title>
      <link href="//2339e0f4.html"/>
      <url>//2339e0f4.html</url>
      
        <content type="html"><![CDATA[<h1 id="初始头文件"><a href="#初始头文件" class="headerlink" title="初始头文件"></a>初始头文件</h1><pre><code># Markdown头文件创建例子---title: 【必需】文章标题date: 【必需】文章创建日期updated: 【可选】文章更新日期tags: 【可选】文章标签categories: 【可选】文章分类keywords: 【可选】文章关键字description: 【可选】文章描述top_img: 【可选】文章顶部图片comments： 【可选】显示文章评论模块 (默认 true)cover: 【可选】文章缩略图 (如果没有设置 top_img, 文章页顶部将显示缩略图，可设为 false / 图片地址 / 留空)toc: 【可选】显示文章 TOC (默认为设置中 toc 的 enable 配置)toc_number: 【可选】显示 toc_number (默认为设置中 toc 的 number 配置)auto_open: 【可选】是否自动打开 TOC (默认为设置中 toc 的 auto_open 配置)copyright: 【可选】显示文章版权模块 (默认为设置中 post_copyright 的 enable 配置)copyright_author: 【可选】文章版权模块的文章作者copyright_author_href: 【可选】文章版权模块的文章作者链接copyright_url: 【可选】文章版权模块的文章连结链接copyright_info: 【可选】文章版权模块的版权声明文字mathjax: 【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)katex: 【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)aplayer: 【可选】在需要的页面加载 aplayer 的 js 和 css, 请参考文章下面的音乐 配置highlight_shrink：【可选】配置代码框是否展开 (true/false)(默认为设置中 highlight_shrink 的配置)---</code></pre><hr><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p> 方式一：这个标题手敲就在文本前边敲#号，#和文本中间需又空格隔开。</p><p> 方式二：快捷键，Ctrl+(1~6)。</p><p> 方式三：在Typora文本编辑区右键鼠标，选择段落也可以插入标题。不止标题，还有其他样式设置</p><p> 方式四：在编辑器中左上角的菜单栏选择段落去插入标题。不止标题，还有其他样式设置</p><pre><code>&#39;&#39;&#39;第一种方式&#39;&#39;&#39;   # 一级标题   快捷键Ctrl + 1   # 二级标题   快捷键Ctrl + 2   # 三级标题   快捷键Ctrl + 3&#39;&#39;&#39;第二种方式&#39;&#39;&#39;  #警号（#）数加空格来决定标题大小</code></pre><table><thead><tr><th align="center">标题</th><th align="center">语法（方式一）</th><th>快捷键（方式二）</th></tr></thead><tbody><tr><td align="center">一级标题</td><td align="center">#一级标题</td><td>ctrl+1</td></tr><tr><td align="center">二级标题</td><td align="center">##二级标题</td><td>ctrl+2</td></tr><tr><td align="center">三级标题</td><td align="center">###三级标题</td><td>ctrl+3</td></tr><tr><td align="center">四级标题</td><td align="center">####四级标题</td><td>ctrl+4</td></tr><tr><td align="center">五级标题</td><td align="center">#####五级标题</td><td>ctrl+5</td></tr><tr><td align="center">六级标题</td><td align="center">#######六级标题</td><td>ctrl+6</td></tr></tbody></table><p><img src="/2339e0f4/1.png" alt="1"></p><p>序号添加:</p><pre><code>    无序标题        星号空格配合文本  * 小标题    有序标题        数字+点+空格+文本  1. 小标题</code></pre><h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><table><thead><tr><th>字体</th><th>语法（方式一）</th><th>快捷键（方式二）</th></tr></thead><tbody><tr><td>斜体</td><td><em>文本</em></td><td>CTRL+I</td></tr><tr><td>加粗</td><td><strong>文本</strong></td><td>CTRL+B</td></tr><tr><td>下划线</td><td><u>文本</u></td><td>CTRL+U</td></tr><tr><td>删除线</td><td><del>文本</del></td><td>Alt+Shift+5</td></tr><tr><td>高亮</td><td>&#x3D;&#x3D;文本&#x3D;&#x3D;</td><td>备注：需勾选高亮设置</td></tr><tr><td>文本居中</td><td><center>文本</center></td><td>无</td></tr><tr><td>文本颜色修改</td><td>$\textcolor{颜色}{文本}$</td><td>备注：需勾选内联公式设置</td></tr></tbody></table><p>使用ctrl+&#x2F;，可切换源代码模式和预览模式</p><p>Ctrl+&#x2F;</p><h1 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h1><p><img src="/2339e0f4/2.png" alt="2"></p><p><img src="/2339e0f4/3.png" alt="3"><img src="/2339e0f4/4.png" alt="4"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
