<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>react学习</title>
      <link href="//undefined.html"/>
      <url>//undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h1><p> 存储数据（其他组件可以使用，数据更改使用setTooltipValue</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const [tooltipValue, setTooltipValue] =  useState(()=&gt;&#123;</span><br><span class="line">     return sessionStorage.getItem(&#x27;tooltipValue&#x27;) || 1.00</span><br><span class="line"> &#125;)  //Temperature;</span><br></pre></td></tr></table></figure><p>更改数据重新储存</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useEffect(() =&gt; &#123;</span><br><span class="line">  sessionStorage.setItem(&#x27;talknow&#x27;, talknow) </span><br><span class="line">&#125;,[talknow]);</span><br></pre></td></tr></table></figure><p>其他部分使用用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sessionStorage.getItem(&#x27;tooltipValue&#x27;) || &#x27;0&#x27;</span><br></pre></td></tr></table></figure><p>直接从redux store获取状态</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const history = useSelector(state=&gt;state.TalkDataHistory)</span><br></pre></td></tr></table></figure><p>参数前端需要声明后端才能使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default function Talkside( ) &#123;</span><br><span class="line">const history = useSelector(state =&gt; state.history);</span><br><span class="line">    const addround = () =&gt;&#123;</span><br><span class="line">        if (round &lt; history.length) &#123;</span><br><span class="line">            const msgs = history[round]; // 获取当前轮数对应的消息数组</span><br><span class="line">            msgs.forEach(msg =&gt; &#123;</span><br><span class="line">                dispatch(&#123; type: &#x27;AddMsg&#x27;, payload: msg &#125;); // 逐个将当前轮数的每个消息对象作为 payload 分发</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        dispatch(&#123;type:&quot;AddRound&quot;&#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>选择改变重新赋值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const handleChangetalk = (value) =&gt; &#123;</span><br><span class="line">    // console.log(`selected $&#123;value&#125;`);</span><br><span class="line">    setTalknow(value)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="弹出选择框实现"><a href="#弹出选择框实现" class="headerlink" title="弹出选择框实现"></a>弹出选择框实现</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const showModal = () =&gt; &#123;</span><br><span class="line">    setIsModalOpen(true);</span><br><span class="line">  &#125;;</span><br><span class="line">  const handleOk = () =&gt; &#123;</span><br><span class="line">    if (newKnowledgeName === &quot;&quot;)&#123;</span><br><span class="line">        message.error(&quot;请填写新建知识库名称&quot;)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        handleCreateNewKnowledge()</span><br><span class="line">    &#125;</span><br><span class="line">    setIsModalOpen(false);</span><br><span class="line">  &#125;;</span><br><span class="line">  const handleCancel = () =&gt; &#123;</span><br><span class="line">    if (newKnowledgeName === &quot;&quot;)&#123;</span><br><span class="line">        message.error(&quot;请填写新建知识库名称&quot;)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">       handleCreateNewKnowledgePrivate()</span><br><span class="line">    &#125;</span><br><span class="line">    setIsModalOpen(false);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输入框功能实现</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">    type=&quot;text&quot;</span><br><span class="line">    placeholder=&quot;请输入知识库名称&quot;</span><br><span class="line">    value=&#123;newKnowledgeName&#125;</span><br><span class="line">    onChange=&#123;(e) =&gt; setNewKnowledgeName(e.target.value)&#125;</span><br><span class="line">    style=&#123;&#123;width:&#x27;90%&#x27;,height:&#x27;37px&#x27;,marginBottom:&#x27;20px&#x27;,padding:&#x27;10px&#x27;,borderRadius:&#x27;6px&#x27;&#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>组件流程</p><p>1.导入对应的库</p><p>2.定义组件并初始化变量</p><p>3.函数处理（与return挂钩）</p><p>4.添加防止页面刷新逻辑</p><p>5.前端显示</p><p>json字符串-字典</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">refer = &#x27;&#123;&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30, &quot;city&quot;: &quot;New York&quot;&#125;&#x27;</span><br><span class="line"></span><br><span class="line"># 解析 JSON 字符串</span><br><span class="line">docs = json.loads(refer)</span><br><span class="line"></span><br><span class="line"># 输出解析后的 Python 对象</span><br><span class="line">print(docs)</span><br><span class="line"># 输出结果： &#123;&#x27;name&#x27;: &#x27;John&#x27;, &#x27;age&#x27;: 30, &#x27;city&#x27;: &#x27;New York&#x27;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>1.部署</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br></pre></td></tr></table></figure><p>2.安装node</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm install 16</span><br></pre></td></tr></table></figure><p>3.设置权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x /gemini/code/knowledge/knowledge01/knowledge/node_modules/.bin/react-scripts</span><br></pre></td></tr></table></figure><p>4.安装依赖包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install markdown-it markdown-it-texmath highlight.js kate</span><br></pre></td></tr></table></figure><p>5.路由</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i react-router-dom@6.22.2  </span><br></pre></td></tr></table></figure><p>6.平滑过渡</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install react-transition-group</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架和库 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
